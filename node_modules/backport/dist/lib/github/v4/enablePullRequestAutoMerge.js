"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseGithubError = exports.enablePullRequestAutoMerge = void 0;
const graphql_tag_1 = __importDefault(require("graphql-tag"));
const FetchPullRequestId_1 = require("./FetchPullRequestId");
const apiRequestV4_1 = require("./apiRequestV4");
async function enablePullRequestAutoMerge(options, targetPullRequestNumber) {
    const { accessToken, githubApiBaseUrlV4, autoMergeMethod = 'merge', } = options;
    const pullRequestId = await (0, FetchPullRequestId_1.fetchPullRequestId)(options, targetPullRequestNumber);
    const query = (0, graphql_tag_1.default) `
    mutation EnablePullRequestAutoMerge(
      $pullRequestId: ID!
      $mergeMethod: PullRequestMergeMethod!
    ) {
      enablePullRequestAutoMerge(
        input: { pullRequestId: $pullRequestId, mergeMethod: $mergeMethod }
      ) {
        pullRequest {
          number
        }
      }
    }
  `;
    const res = await (0, apiRequestV4_1.apiRequestV4)({
        githubApiBaseUrlV4,
        accessToken,
        query,
        variables: {
            pullRequestId,
            mergeMethod: autoMergeMethod.toUpperCase(),
        },
    });
    return res.enablePullRequestAutoMerge.pullRequest?.number;
}
exports.enablePullRequestAutoMerge = enablePullRequestAutoMerge;
function parseGithubError(e) {
    const isMissingStatusChecks = e.githubResponse.data.errors?.some((e) => e.type === 'UNPROCESSABLE' &&
        (e.message.includes('Branch does not have required protected branch rules') ||
            e.message.includes('Pull request is in clean status')));
    return { isMissingStatusChecks };
}
exports.parseGithubError = parseGithubError;
//# sourceMappingURL=enablePullRequestAutoMerge.js.map