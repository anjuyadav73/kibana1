/// <reference types="node" />
import childProcess from 'child_process';
export declare function exec(cmd: string, options: childProcess.ExecOptions & {
    cwd: string;
}): Promise<{
    stdout: string;
    stderr: string;
}>;
declare type SpawnPromiseResponse = {
    cmdArgs: ReadonlyArray<string>;
    code: number | null;
    stderr: string;
    stdout: string;
};
export declare function spawnPromise(cmd: string, cmdArgs: ReadonlyArray<string>, cwd: string): Promise<SpawnPromiseResponse>;
export declare const spawnStream: (cmd: string, cmdArgs: ReadonlyArray<string>) => childProcess.ChildProcessWithoutNullStreams;
export declare type SpawnErrorContext = {
    cmdArgs: ReadonlyArray<string>;
    code: number;
    stderr: string;
    stdout: string;
};
export declare class SpawnError extends Error {
    context: SpawnErrorContext;
    constructor(context: SpawnErrorContext);
}
export {};
