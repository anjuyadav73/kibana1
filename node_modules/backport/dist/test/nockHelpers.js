"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listenForCallsToNockScope = exports.mockGqlRequest = void 0;
const url_1 = require("url");
const graphql_tag_1 = __importDefault(require("graphql-tag"));
const graphql_tag_2 = require("graphql-tag");
const nock_1 = __importDefault(require("nock"));
const apiRequestV4_1 = require("../lib/github/v4/apiRequestV4");
(0, graphql_tag_2.disableFragmentWarnings)();
function mockGqlRequest({ name, statusCode, body, headers, apiBaseUrl, }) {
    const { origin, pathname } = new url_1.URL(
    // default to localhost as host to avoid CORS issues
    // Remember to set `githubApiBaseUrlV4: 'http://localhost/graphql'` in options
    apiBaseUrl ?? 'http://localhost/graphql');
    const scope = (0, nock_1.default)(origin)
        .post(pathname, (body) => (0, apiRequestV4_1.getQueryName)((0, graphql_tag_1.default)(body.query)) === name)
        .reply(statusCode, body, headers);
    return listenForCallsToNockScope(scope);
}
exports.mockGqlRequest = mockGqlRequest;
function listenForCallsToNockScope(scope) {
    const calls = [];
    scope.on('request', (req, interceptor, body) => {
        calls.push(JSON.parse(body));
    });
    return calls;
}
exports.listenForCallsToNockScope = listenForCallsToNockScope;
//# sourceMappingURL=nockHelpers.js.map