import ejs from 'ejs';
export declare const TEMPLATES_PATH: string;
export declare const DEFAULT_TEMPLATE_PATH: string;
/**
 * Recursively create an arborescence to the given path
 *
 * @param p Path to follow
 */
export declare const mkdirp: (p: string) => Promise<string | undefined>;
/**
 * Make array values unique
 *
 * @param arr Source array of strings
 */
export declare const unique: (arr: string[]) => string[];
/**
 * Check a path exists on the file system
 *
 * @param p Path to check existance from
 * @throws Path does not exist
 */
export declare const pathExists: (p: string, logIfFail?: boolean) => Promise<boolean>;
export declare const loadFileOrThrowIfNotExist: (optionName: string, filePath: string) => Promise<string>;
/**
 * Try to load file from CLI parameter or from `api_project.json`
 * @param optionName CLI parameter/`api_project.json` key name
 * @param cliParam Received CLI param value
 * @param apiDocProjectData `api_project.json` content
 * @returns
 */
export declare const loadFromCliParamOrApiDocProject: (optionName: string, cliParam: string | undefined, apiDocProjectData: any) => Promise<string | undefined>;
/**
 * Check if a template is in the templates directory
 * @param name template name (without the `.md` file extension)
 */
export declare const isInTemplatesDir: (name: string) => Promise<boolean>;
/**
 * Load apiDoc files, be backward-compatible with legacy `apidoc.json`
 * @param apiDocPath Path to generated apiDoc output directory. Where `api_data.json` and `api_project.json` are located
 * @throws Could not load `api_project.json` or `apidoc.json`
 */
export declare const loadApidocFiles: (apiDocPath: string) => Promise<{
    apiDocProjectData: any;
    apiDocApiData: any[];
}>;
/**
 * Load the template and compile it with EJS
 * @param template template path, name or raw plain text
 * @param logIfFileNotFound turn off logging
 */
export declare const loadTemplate: (template?: string | undefined, logIfFileNotFound?: boolean) => Promise<ejs.AsyncTemplateFunction>;
/** Utility functions passed to the EJS template */
export declare const templateUtils: {
    /**
     * Convert a title to a Markdown-valid relative link
     * @param str Title to convert
     * @returns The valid linkable string
     */
    toLink: (str: string) => string;
};
