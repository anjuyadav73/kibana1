/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-07-17 18:45:32
 */
import { __assign, __awaiter, __generator, __values } from "tslib";
import chalk from 'chalk';
import fs from 'fs-extra';
import G from 'glob';
import { builtinModules } from 'module';
import path from 'path';
import util from 'util';
var allBuiltins = new Set(builtinModules);
export var glob = util.promisify(G);
export var defaultOptions = {
    context: process.cwd(),
    extensions: ['', '.ts', '.tsx', '.mjs', '.js', '.jsx', '.json'],
    js: ['.ts', '.tsx', '.mjs', '.js', '.jsx'],
    include: /.*/,
    exclude: /\/node_modules\//,
    tsconfig: void 0,
    transform: false,
    onProgress: function () { return void 0; },
};
export function normalizeOptions(options) {
    var newOptions = __assign(__assign({}, defaultOptions), options);
    if (newOptions.extensions.indexOf('') < 0) {
        newOptions.extensions.unshift('');
    }
    newOptions.context = path.resolve(newOptions.context);
    if (options.tsconfig === void 0) {
        try {
            var tsconfig = path.join(newOptions.context, 'tsconfig.json');
            var stat = fs.statSync(tsconfig);
            if (stat.isFile()) {
                options.tsconfig = tsconfig;
            }
        }
        catch (_a) { }
    }
    else {
        var stat = void 0;
        try {
            stat = fs.statSync(options.tsconfig);
        }
        catch (_b) { }
        if (!stat || !stat.isFile()) {
            throw new Error("specified tsconfig \"" + options.tsconfig + "\" is not a file");
        }
        options.tsconfig = path.join(process.cwd(), options.tsconfig);
    }
    return newOptions;
}
export function appendSuffix(request, extensions) {
    return __awaiter(this, void 0, void 0, function () {
        var extensions_1, extensions_1_1, ext, stat, _a, e_1_1, stat, _b;
        var e_1, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _d.trys.push([0, 7, 8, 9]);
                    extensions_1 = __values(extensions), extensions_1_1 = extensions_1.next();
                    _d.label = 1;
                case 1:
                    if (!!extensions_1_1.done) return [3 /*break*/, 6];
                    ext = extensions_1_1.value;
                    _d.label = 2;
                case 2:
                    _d.trys.push([2, 4, , 5]);
                    return [4 /*yield*/, fs.stat(request + ext)];
                case 3:
                    stat = _d.sent();
                    if (stat.isFile()) {
                        return [2 /*return*/, request + ext];
                    }
                    return [3 /*break*/, 5];
                case 4:
                    _a = _d.sent();
                    return [3 /*break*/, 5];
                case 5:
                    extensions_1_1 = extensions_1.next();
                    return [3 /*break*/, 1];
                case 6: return [3 /*break*/, 9];
                case 7:
                    e_1_1 = _d.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 9];
                case 8:
                    try {
                        if (extensions_1_1 && !extensions_1_1.done && (_c = extensions_1.return)) _c.call(extensions_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 9:
                    _d.trys.push([9, 11, , 12]);
                    return [4 /*yield*/, fs.stat(request)];
                case 10:
                    stat = _d.sent();
                    if (stat.isDirectory()) {
                        return [2 /*return*/, appendSuffix(path.join(request, 'index'), extensions)];
                    }
                    return [3 /*break*/, 12];
                case 11:
                    _b = _d.sent();
                    return [3 /*break*/, 12];
                case 12: return [2 /*return*/, null];
            }
        });
    });
}
export var simpleResolver = function (context, request, extensions) { return __awaiter(void 0, void 0, void 0, function () {
    var nodePath, pkgPath, pkgJson, id, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (path.isAbsolute(request)) {
                    return [2 /*return*/, appendSuffix(request, extensions)];
                }
                if (request.charAt(0) === '.') {
                    return [2 /*return*/, appendSuffix(path.join(context, request), extensions)];
                }
                nodePath = { paths: [context] };
                _b.label = 1;
            case 1:
                _b.trys.push([1, 3, , 4]);
                pkgPath = require.resolve(path.join(request, 'package.json'), nodePath);
                return [4 /*yield*/, fs.readJSON(pkgPath)];
            case 2:
                pkgJson = _b.sent();
                id = path.join(path.dirname(pkgPath), pkgJson.module || pkgJson.main);
                return [2 /*return*/, appendSuffix(id, extensions)];
            case 3:
                _a = _b.sent();
                return [3 /*break*/, 4];
            case 4:
                try {
                    return [2 /*return*/, require.resolve(request, nodePath)];
                }
                catch (_c) { }
                return [2 /*return*/, null];
        }
    });
}); };
export function shortenTree(context, tree) {
    var output = {};
    var _loop_1 = function (key) {
        var shortKey = path.relative(context, key);
        output[shortKey] = tree[key]
            ? tree[key].map(function (item) {
                return (__assign(__assign({}, item), { issuer: shortKey, id: item.id === null ? null : path.relative(context, item.id) }));
            })
            : null;
    };
    for (var key in tree) {
        _loop_1(key);
    }
    return output;
}
export function parseCircular(tree) {
    var circulars = [];
    tree = __assign({}, tree);
    function visit(id, used) {
        var index = used.indexOf(id);
        if (index > -1) {
            circulars.push(used.slice(index));
        }
        else if (tree[id]) {
            used.push(id);
            var deps = tree[id];
            delete tree[id];
            deps &&
                deps.forEach(function (dep) {
                    dep.id && visit(dep.id, used.slice());
                });
        }
    }
    for (var id in tree) {
        visit(id, []);
    }
    return circulars;
}
export function parseDependents(tree) {
    var output = {};
    var _loop_2 = function (key) {
        var deps = tree[key];
        if (deps) {
            deps.forEach(function (dep) {
                if (dep.id) {
                    (output[dep.id] = output[dep.id] || []).push(key);
                }
            });
        }
    };
    for (var key in tree) {
        _loop_2(key);
    }
    for (var key in output) {
        output[key].sort();
    }
    return output;
}
export function parseWarnings(tree, dependents) {
    var e_2, _a;
    if (dependents === void 0) { dependents = parseDependents(tree); }
    var warnings = [];
    var builtin = new Set();
    for (var key in tree) {
        var deps = tree[key];
        if (!builtin.has(key) && allBuiltins.has(key)) {
            builtin.add(key);
        }
        if (!deps) {
            var parents = dependents[key] || [];
            var total = parents.length;
            warnings.push("skip " + JSON.stringify(key) + ", issuers: " + parents
                .slice(0, 2)
                .map(function (id) { return JSON.stringify(id); })
                .join(', ') + (total > 2 ? " (" + (total - 2) + " more...)" : ''));
        }
        else {
            try {
                for (var deps_1 = (e_2 = void 0, __values(deps)), deps_1_1 = deps_1.next(); !deps_1_1.done; deps_1_1 = deps_1.next()) {
                    var dep = deps_1_1.value;
                    if (!dep.id) {
                        warnings.push("miss " + JSON.stringify(dep.request) + " in " + JSON.stringify(dep.issuer));
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (deps_1_1 && !deps_1_1.done && (_a = deps_1.return)) _a.call(deps_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    }
    if (builtin.size > 0) {
        warnings.push('node ' + Array.from(builtin, function (item) { return JSON.stringify(item); }).join(', '));
    }
    return warnings.sort();
}
export function prettyTree(tree, entries, prefix) {
    if (prefix === void 0) { prefix = '  '; }
    var lines = [];
    var id = 0;
    var idMap = {};
    var digits = Math.ceil(Math.log10(Object.keys(tree).length));
    function visit(item, prefix, hasMore) {
        var isNew = idMap[item] === void 0;
        var iid = (idMap[item] = idMap[item] || id++);
        var line = chalk.gray(prefix + '- ' + iid.toString().padStart(digits, '0') + ') ');
        var deps = tree[item];
        if (allBuiltins.has(item)) {
            lines.push(line + chalk.blue(item));
            return;
        }
        else if (!isNew) {
            lines.push(line + chalk.gray(item));
            return;
        }
        else if (!deps) {
            lines.push(line + chalk.yellow(item));
            return;
        }
        lines.push(line + item);
        prefix += hasMore ? 'Â·   ' : '    ';
        for (var i = 0; i < deps.length; i++) {
            visit(deps[i].id || deps[i].request, prefix, i < deps.length - 1);
        }
    }
    for (var i = 0; i < entries.length; i++) {
        visit(entries[i], prefix, i < entries.length - 1);
    }
    return lines.join('\n');
}
export function prettyCircular(circulars, prefix) {
    if (prefix === void 0) { prefix = '  '; }
    var digits = Math.ceil(Math.log10(circulars.length));
    return circulars
        .map(function (line, index) {
        return (chalk.gray("" + prefix + (index + 1).toString().padStart(digits, '0') + ") ") + line.map(function (item) { return chalk.red(item); }).join(chalk.gray(' -> ')));
    })
        .join('\n');
}
export function prettyWarning(warnings, prefix) {
    if (prefix === void 0) { prefix = '  '; }
    var digits = Math.ceil(Math.log10(warnings.length));
    return warnings
        .map(function (line, index) {
        return (chalk.gray("" + prefix + (index + 1).toString().padStart(digits, '0') + ") ") + chalk.yellow(line));
    })
        .join('\n');
}
//# sourceMappingURL=utils.js.map