#!/usr/bin/env node
"use strict";
/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-07-17 18:45:32
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var chalk_1 = tslib_1.__importDefault(require("chalk"));
var fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
var ora_1 = tslib_1.__importDefault(require("ora"));
var path_1 = tslib_1.__importDefault(require("path"));
var yargs_1 = tslib_1.__importDefault(require("yargs"));
var parser_1 = require("../parser");
var utils_1 = require("../utils");
var argv = yargs_1.default
    .strict()
    .usage('$0 [options] files...')
    .option('context', {
    type: 'string',
    desc: 'the context directory to shorten path, default is current directory',
})
    .option('extensions', {
    alias: 'ext',
    type: 'string',
    desc: 'comma separated extensions to resolve',
    default: utils_1.defaultOptions.extensions.filter(Boolean).join(','),
})
    .option('js', {
    type: 'string',
    desc: 'comma separated extensions indicate the file is js like',
    default: utils_1.defaultOptions.js.join(','),
})
    .option('include', {
    type: 'string',
    desc: 'included filenames regexp in string, default includes all files',
    default: utils_1.defaultOptions.include.source,
})
    .option('exclude', {
    type: 'string',
    desc: 'excluded filenames regexp in string, set as empty string to include all files',
    default: utils_1.defaultOptions.exclude.source,
})
    .option('output', {
    alias: 'o',
    type: 'string',
    desc: 'output json to file',
})
    .option('tree', {
    type: 'boolean',
    desc: 'print tree to stdout',
    default: true,
})
    .option('circular', {
    type: 'boolean',
    desc: 'print circular to stdout',
    default: true,
})
    .option('warning', {
    type: 'boolean',
    desc: 'print warning to stdout',
    default: true,
})
    .option('tsconfig', {
    type: 'string',
    desc: 'the tsconfig path, which is used for resolve path alias, default is tsconfig.json if it exists in context directory',
})
    .option('transform', {
    type: 'boolean',
    desc: 'transform typescript modules to javascript before analyze, it allows you to omit types dependency in typescript',
    default: utils_1.defaultOptions.transform,
    alias: 'T',
})
    .option('exit-code', {
    type: 'string',
    desc: 'exit with specified code, the value format is CASE:CODE, `circular` is the only supported CASE, ' +
        'CODE should be a integer between 0 and 128. ' +
        'For example: `dpdm --exit-code circular:1` the program will exit with code 1 if circular dependency found.',
})
    .alias('h', 'help')
    .wrap(Math.min(yargs_1.default.terminalWidth(), 100)).argv;
if (argv._.length === 0) {
    yargs_1.default.showHelp();
    console.log('\nMissing entry file');
    process.exit(1);
}
var exitCases = new Set(['circular']);
var exitCodes = [];
if (argv['exit-code']) {
    argv['exit-code'].split(',').forEach(function (c) {
        var _a = tslib_1.__read(c.split(':'), 2), label = _a[0], code = _a[1];
        if (!code || !isFinite(+code)) {
            throw new TypeError("exit code should be a number");
        }
        if (!exitCases.has(label)) {
            throw new TypeError("unsupported exit case \"" + label + "\"");
        }
        exitCodes.push([label, +code]);
    });
}
var o = ora_1.default('Loading dependencies...').start();
var total = 0;
var ended = 0;
var current = '';
var context = argv.context || process.cwd();
function onProgress(event, target) {
    switch (event) {
        case 'start':
            total += 1;
            current = path_1.default.relative(context, target);
            break;
        case 'end':
            ended += 1;
            break;
    }
    o.text = "[" + ended + "/" + total + "] Analyzing " + current + "...";
    o.render();
}
var options = {
    context: context,
    extensions: argv.extensions.split(','),
    js: argv.js.split(','),
    include: new RegExp(argv.include || '.*'),
    exclude: new RegExp(argv.exclude || '$.'),
    tsconfig: argv.tsconfig,
    transform: argv.transform,
    onProgress: onProgress,
};
parser_1.parseDependencyTree(argv._, options)
    .then(function (tree) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var entriesDeep, entries, circulars, exitCodes_1, exitCodes_1_1, _a, label, code;
    var _b, e_1, _c;
    return tslib_1.__generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                o.succeed("[" + ended + "/" + total + "] Analyze done!");
                return [4 /*yield*/, Promise.all(argv._.map(function (g) { return utils_1.glob(g); }))];
            case 1:
                entriesDeep = _d.sent();
                return [4 /*yield*/, Promise.all((_b = Array()).concat.apply(_b, tslib_1.__spread(entriesDeep)).map(function (name) {
                        return utils_1.simpleResolver(options.context, path_1.default.join(options.context, name), options.extensions).then(function (id) { return (id ? path_1.default.relative(options.context, id) : name); });
                    }))];
            case 2:
                entries = _d.sent();
                circulars = utils_1.parseCircular(tree);
                if (!argv.output) return [3 /*break*/, 4];
                return [4 /*yield*/, fs_extra_1.default.outputJSON(argv.output, { entries: entries, tree: tree, circulars: circulars }, { spaces: 2 })];
            case 3:
                _d.sent();
                _d.label = 4;
            case 4:
                if (argv.tree) {
                    console.log(chalk_1.default.bold('• Dependencies Tree'));
                    console.log(utils_1.prettyTree(tree, entries));
                    console.log('');
                }
                if (argv.circular) {
                    console.log(chalk_1.default.bold.red('• Circular Dependencies'));
                    if (circulars.length === 0) {
                        console.log(chalk_1.default.bold.green('  ✅ Congratulations, no circular dependency were found in your project.'));
                    }
                    else {
                        console.log(utils_1.prettyCircular(circulars));
                    }
                    console.log('');
                }
                if (argv.warning) {
                    console.log(chalk_1.default.bold.yellow('• Warnings'));
                    console.log(utils_1.prettyWarning(utils_1.parseWarnings(tree)));
                    console.log('');
                }
                try {
                    for (exitCodes_1 = tslib_1.__values(exitCodes), exitCodes_1_1 = exitCodes_1.next(); !exitCodes_1_1.done; exitCodes_1_1 = exitCodes_1.next()) {
                        _a = tslib_1.__read(exitCodes_1_1.value, 2), label = _a[0], code = _a[1];
                        switch (label) {
                            case 'circular':
                                if (circulars.length > 0) {
                                    process.exit(code);
                                }
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (exitCodes_1_1 && !exitCodes_1_1.done && (_c = exitCodes_1.return)) _c.call(exitCodes_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return [2 /*return*/];
        }
    });
}); })
    .catch(function (e) {
    o.fail();
    console.error(e.stack || e);
    process.exit(1);
});
//# sourceMappingURL=dpdm.js.map