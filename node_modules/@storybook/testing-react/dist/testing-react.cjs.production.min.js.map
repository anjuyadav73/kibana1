{"version":3,"file":"testing-react.cjs.production.min.js","sources":["../src/utils.tsx","../src/index.ts"],"sourcesContent":["import React from 'react';\n\nimport type { FunctionComponent } from 'react';\nimport type { Story } from '@storybook/react';\nimport type { TestingStory } from './types';\n\nexport const globalRender: Story = (args, { parameters }) => {\n  if (!parameters.component) {\n    throw new Error(`\n      Could not render story due to missing 'component' property in Meta.\n      Please refer to https://github.com/storybookjs/testing-react#csf3\n    `);\n  }\n\n  const Component = parameters.component as FunctionComponent;\n  return <Component {...args} />;\n};\n\nconst invalidStoryTypes = new Set(['string', 'number', 'boolean', 'symbol']);\n\nexport const isInvalidStory = (story?: any) => (!story || Array.isArray(story) || invalidStoryTypes.has(typeof story))\n\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T];\nexport function objectEntries<T extends object>(t: T): Entries<T>[] {\n  return Object.entries(t) as any;\n}\n\nexport const getStoryName = (story: TestingStory) => {\n  if(story.storyName) {\n    return story.storyName\n  }\n\n  if(typeof story !== 'function' && story.name) {\n    return story.name\n  }\n\n  return undefined\n}","import { defaultDecorateStory, combineParameters } from '@storybook/client-api';\nimport addons, { applyHooks, HooksContext, mockChannel } from '@storybook/addons';\nimport type { Meta, StoryContext, ReactFramework } from '@storybook/react';\nimport { isExportStory } from '@storybook/csf'\n\nimport type { GlobalConfig, StoriesWithPartialProps, StoryFile, TestingStory, TestingStoryPlayContext } from './types';\nimport { getStoryName, globalRender, isInvalidStory, objectEntries } from './utils';\n\n// Some addons use the channel api to communicate between manager/preview, and this is a client only feature, therefore we must mock it.\naddons.setChannel(mockChannel());\n\nlet globalStorybookConfig = {};\n\nconst decorateStory = applyHooks(defaultDecorateStory);\n\nconst isValidStoryExport = (storyName: string, nonStoryExportsConfig = {}) =>\n  isExportStory(storyName, nonStoryExportsConfig) && storyName !== '__namedExportsOrder'\n\n/** Function that sets the globalConfig of your storybook. The global config is the preview module of your .storybook folder.\n *\n * It should be run a single time, so that your global config (e.g. decorators) is applied to your stories when using `composeStories` or `composeStory`.\n *\n * Example:\n *```jsx\n * // setup.js (for jest)\n * import { setGlobalConfig } from '@storybook/testing-react';\n * import * as globalStorybookConfig from './.storybook/preview';\n *\n * setGlobalConfig(globalStorybookConfig);\n *```\n *\n * @param config - e.g. (import * as globalConfig from '../.storybook/preview')\n */\nexport function setGlobalConfig(config: GlobalConfig) {\n  globalStorybookConfig = config;\n}\n\n/**\n * Function that will receive a story along with meta (e.g. a default export from a .stories file)\n * and optionally a globalConfig e.g. (import * from '../.storybook/preview)\n * and will return a composed component that has all args/parameters/decorators/etc combined and applied to it.\n *\n *\n * It's very useful for reusing a story in scenarios outside of Storybook like unit testing.\n *\n * Example:\n *```jsx\n * import { render } from '@testing-library/react';\n * import { composeStory } from '@storybook/testing-react';\n * import Meta, { Primary as PrimaryStory } from './Button.stories';\n *\n * const Primary = composeStory(PrimaryStory, Meta);\n *\n * test('renders primary button with Hello World', () => {\n *   const { getByText } = render(<Primary>Hello world</Primary>);\n *   expect(getByText(/Hello world/i)).not.toBeNull();\n * });\n *```\n *\n * @param story\n * @param meta - e.g. (import Meta from './Button.stories')\n * @param [globalConfig] - e.g. (import * as globalConfig from '../.storybook/preview') this can be applied automatically if you use `setGlobalConfig` in your setup files.\n */\nexport function composeStory<GenericArgs>(\n  story: TestingStory<GenericArgs>,\n  meta: Meta<GenericArgs | any>,\n  globalConfig: GlobalConfig = globalStorybookConfig\n) {\n\n  if (isInvalidStory(story)) {\n    throw new Error(\n      `Cannot compose story due to invalid format. @storybook/testing-react expected a function/object but received ${typeof story} instead.`\n    );\n  }\n\n  if (story.story !== undefined) {\n    throw new Error(\n      `StoryFn.story object-style annotation is not supported. @storybook/testing-react expects hoisted CSF stories.\n       https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#hoisted-csf-annotations`\n    );\n  }\n\n  const renderFn = typeof story === 'function' ? story : story.render ?? globalRender;\n  const finalStoryFn = (context: StoryContext<ReactFramework, GenericArgs>) => {\n    const { passArgsFirst = true } = context.parameters;\n    if (!passArgsFirst) {\n      throw new Error(\n        'composeStory does not support legacy style stories (with passArgsFirst = false).'\n      );\n    }\n\n    return renderFn(context.args, context);\n  };\n\n  const combinedDecorators = [\n    ...(story.decorators || []),\n    ...(meta?.decorators || []),\n    ...(globalConfig.decorators || []),\n  ];\n\n  const decorated = decorateStory<ReactFramework>(\n    finalStoryFn as any,\n    combinedDecorators as any\n  );\n\n  const defaultGlobals = Object.entries(\n    (globalConfig.globalTypes || {}) as Record<string, { defaultValue: any }>\n  ).reduce((acc, [arg, { defaultValue }]) => {\n    if (defaultValue) {\n      acc[arg] = defaultValue;\n    }\n    return acc;\n  }, {} as Record<string, { defaultValue: any }>);\n\n  const combinedParameters = combineParameters(\n    globalConfig.parameters || {},\n    meta?.parameters || {},\n    story.parameters || {},\n    { component: meta?.component }\n  )\n\n  const combinedArgs = {\n    ...meta?.args,\n    ...story.args\n  } as GenericArgs\n\n  const context = {\n    componentId: '',\n    kind: '',\n    title: '',\n    id: '',\n    name: '',\n    story: '',\n    argTypes: globalConfig.argTypes || {},\n    globals: defaultGlobals,\n    parameters: combinedParameters,\n    initialArgs: combinedArgs,\n    args: combinedArgs,\n    viewMode: 'story',\n    originalStoryFn: renderFn,\n    hooks: new HooksContext(),\n  } as StoryContext<ReactFramework, GenericArgs>;\n\n  const composedStory = (extraArgs: Partial<GenericArgs>) => {\n    return decorated({\n      ...context,\n      args: {\n        ...combinedArgs, ...extraArgs\n      }\n    })\n  }\n\n  const boundPlay = ({ ...extraContext }: TestingStoryPlayContext<GenericArgs>) => {\n    return story.play?.({ ...context, ...extraContext });\n  }\n\n  composedStory.storyName = story.storyName || story.name\n  composedStory.args = combinedArgs\n  composedStory.play = boundPlay;\n  composedStory.decorators = combinedDecorators\n  composedStory.parameters = combinedParameters\n\n  return composedStory\n}\n\n/**\n * Function that will receive a stories import (e.g. `import * as stories from './Button.stories'`)\n * and optionally a globalConfig (e.g. `import * from '../.storybook/preview`)\n * and will return an object containing all the stories passed, but now as a composed component that has all args/parameters/decorators/etc combined and applied to it.\n *\n *\n * It's very useful for reusing stories in scenarios outside of Storybook like unit testing.\n *\n * Example:\n *```jsx\n * import { render } from '@testing-library/react';\n * import { composeStories } from '@storybook/testing-react';\n * import * as stories from './Button.stories';\n *\n * const { Primary, Secondary } = composeStories(stories);\n *\n * test('renders primary button with Hello World', () => {\n *   const { getByText } = render(<Primary>Hello world</Primary>);\n *   expect(getByText(/Hello world/i)).not.toBeNull();\n * });\n *```\n *\n * @param storiesImport - e.g. (import * as stories from './Button.stories')\n * @param [globalConfig] - e.g. (import * as globalConfig from '../.storybook/preview') this can be applied automatically if you use `setGlobalConfig` in your setup files.\n */\nexport function composeStories<\n  TModule extends StoryFile\n>(storiesImport: TModule, globalConfig?: GlobalConfig) {\n  const { default: meta, __esModule, ...stories } = storiesImport;\n\n  // This function should take this as input: \n  // {\n  //   default: Meta,\n  //   Primary: Story<ButtonProps>, <-- Props extends Args\n  //   Secondary: Story<OtherProps>,\n  // }\n\n  // And strips out default, then return composed stories as output: \n  // {\n  //   Primary: ComposedStory<Partial<ButtonProps>>,\n  //   Secondary: ComposedStory<Partial<OtherProps>>,\n  // }\n\n  // Compose an object containing all processed stories passed as parameters\n  const composedStories = objectEntries(stories).reduce<Partial<StoriesWithPartialProps<TModule>>>(\n    (storiesMap, [key, _story]) => {\n      const storyName = String(key)\n      // filter out non-story exports\n      if (!isValidStoryExport(storyName, meta)) {\n        return storiesMap;\n      }\n\n      const story = _story as TestingStory\n      story.storyName = getStoryName(story) || storyName\n      const result = Object.assign(storiesMap, {\n        [key]: composeStory(story, meta, globalConfig)\n      });\n      return result;\n    },\n    {}\n  );\n\n  // @TODO: the inferred type of composedStories is correct but Partial.\n  // investigate whether we can return an unpartial type of that without this hack\n  return composedStories as unknown as Omit<StoriesWithPartialProps<TModule>, keyof StoryFile>;\n}"],"names":["globalRender","args","parameters","component","Error","React","invalidStoryTypes","Set","addons","setChannel","mockChannel","globalStorybookConfig","decorateStory","applyHooks","defaultDecorateStory","composeStory","story","meta","globalConfig","Array","isArray","has","isInvalidStory","undefined","renderFn","render","combinedDecorators","decorators","decorated","context","passArgsFirst","defaultGlobals","Object","entries","globalTypes","reduce","acc","defaultValue","combinedParameters","combineParameters","combinedArgs","componentId","kind","title","id","name","argTypes","globals","initialArgs","viewMode","originalStoryFn","hooks","HooksContext","composedStory","extraArgs","storyName","play","extraContext","storiesImport","t","storiesMap","key","_story","String","nonStoryExportsConfig","isExportStory","isValidStoryExport","getStoryName","assign","config"],"mappings":"wdAMO,IAAMA,EAAsB,SAACC,SAAQC,IAAAA,eACrCA,EAAWC,gBACR,IAAIC,2KAOLC,gBADWH,EAAWC,eACPF,KAGlBK,EAAoB,IAAIC,IAAI,CAAC,SAAU,SAAU,UAAW,sCCTlEC,EAAOC,WAAWC,iBAElB,IAAIC,EAAwB,GAEtBC,EAAgBC,aAAWC,wBAkDjC,SAAgBC,EACdC,EACAC,EACAC,qBAAAA,IAAAA,EAA6BP,GD9CD,SAACK,UAAkBA,GAASG,MAAMC,QAAQJ,IAAUV,EAAkBe,WAAWL,GCiDzGM,CAAeN,SACX,IAAIZ,6HAC+GY,uBAIvGO,IAAhBP,EAAMA,YACF,IAAIZ,2NAMNoB,EAA4B,mBAAVR,EAAuBA,WAAQA,EAAMS,UAAUzB,EAYjE0B,YACAV,EAAMW,YAAc,UACpBV,SAAAA,EAAMU,aAAc,GACpBT,EAAaS,YAAc,IAG3BC,EAAYhB,GAjBG,SAACiB,SACaA,EAAQ3B,WAAjC4B,sCAEA,IAAI1B,MACR,2FAIGoB,EAASK,EAAQ5B,KAAM4B,KAW9BH,GAGIK,EAAiBC,OAAOC,QAC3Bf,EAAagB,aAAe,IAC7BC,QAAO,SAACC,SAAaC,OAAAA,oBACjBA,IACFD,QAAWC,GAEND,IACN,IAEGE,EAAqBC,oBACzBrB,EAAahB,YAAc,UAC3Be,SAAAA,EAAMf,aAAc,GACpBc,EAAMd,YAAc,GACpB,CAAEC,gBAAWc,SAAAA,EAAMd,YAGfqC,aACDvB,SAAAA,EAAMhB,KACNe,EAAMf,MAGL4B,EAAU,CACdY,YAAa,GACbC,KAAM,GACNC,MAAO,GACPC,GAAI,GACJC,KAAM,GACN7B,MAAO,GACP8B,SAAU5B,EAAa4B,UAAY,GACnCC,QAAShB,EACT7B,WAAYoC,EACZU,YAAaR,EACbvC,KAAMuC,EACNS,SAAU,QACVC,gBAAiB1B,EACjB2B,MAAO,IAAIC,gBAGPC,EAAgB,SAACC,UACd1B,OACFC,GACH5B,UACKuC,EAAiBc,cAS1BD,EAAcE,UAAYvC,EAAMuC,WAAavC,EAAM6B,KACnDQ,EAAcpD,KAAOuC,EACrBa,EAAcG,KANI,gBAAMC,uBACfzC,EAAMwC,YAANxC,EAAMwC,UAAY3B,EAAY4B,KAMvCJ,EAAc1B,WAAaD,EAC3B2B,EAAcnD,WAAaoC,EAEpBe,kCA8BPK,EAAwBxC,ODvKsByC,ECwK7B1C,EAAiCyC,iBDxKJC,qICwKID,KDvK3C1B,OAAOC,QAAQ0B,ICuLyBxB,QAC7C,SAACyB,WAAaC,OAAKC,OACXP,EAAYQ,OAAOF,OApMJ,SAACN,EAAmBS,mBAAAA,IAAAA,EAAwB,IACrEC,gBAAcV,EAAWS,IAAwC,wBAAdT,EAqM1CW,CAAmBX,EAAWtC,UAC1B2C,MAGH5C,EAAQ8C,SACd9C,EAAMuC,UD7LgB,SAACvC,UACxBA,EAAMuC,UACAvC,EAAMuC,UAGK,mBAAVvC,GAAwBA,EAAM6B,KAC/B7B,EAAM6B,YCuLOsB,CAAanD,IAAUuC,EAC1BvB,OAAOoC,OAAOR,UAC1BC,GAAM9C,EAAaC,EAAOC,EAAMC,SAIrC,6DA/L4BmD,GAC9B1D,EAAwB0D"}