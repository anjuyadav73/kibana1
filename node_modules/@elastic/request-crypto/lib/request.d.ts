import { EncryptOutput } from '@elastic/node-crypto';
import { JWKDecryptResult, PrivateJWKS, PublicJWK, PublicJWKS } from './jwks';
export interface Encryptor {
    encrypt(kid: string, input: any): Promise<string>;
}
export interface Decryptor {
    getPublicComponent(kid: string): PublicJWK | null;
    getWellKnowns(): PublicJWKS;
    decrypt(encryptedBody: string): Promise<EncryptOutput | EncryptOutput[]>;
    getJWKMetadata(encryptedBody: string): Promise<Pick<JWKDecryptResult, 'key' | 'protected' | 'header'>>;
}
export declare function createRequestEncryptor(publicJWKS: PublicJWKS): Promise<Encryptor>;
export declare function createRequestDecryptor(privateJWKS: PrivateJWKS): Promise<Decryptor>;
export declare function packBody(encryptedAESKey: string, encryptedPayload: string): string;
export declare function unpackBody(packedBody: string): {
    encryptedAESKey: any;
    encryptedPayload: any;
};
