/// <reference types="node" />
import * as jose from 'node-jose';
export interface JWKS<T = PublicJWK | PrivateJWK> {
    keys: T[];
}
export interface PublicJWK {
    kty: string;
    kid: string;
    use: KeyUse;
    alg: string;
    e: string;
    n: string;
}
export interface PrivateJWK extends PublicJWK {
    d: string;
    p: string;
    q: string;
    dp: string;
    dq: string;
    qi: string;
}
export declare type JWKMetadata = Pick<jose.JWK.Key, 'length' | 'kty' | 'kid' | 'use' | 'alg'>;
export declare type KeyUse = 'enc' | 'desc';
export declare type PublicJWKS = JWKS<PublicJWK>;
export declare type PrivateJWKS = JWKS<PrivateJWK>;
export declare type JWK = PrivateJWK | PublicJWK;
export declare type UnsignedJWK = PrivateJWK | PublicJWK;
export declare const RSA_ALGORITHM = "RSA-OAEP";
export interface JWKDecryptResult extends Omit<jose.JWE.DecryptResult, 'key' | 'header'> {
    /**
     * JWK metadata
     */
    key: JWKMetadata;
    /**
     * an object of "protected" member key values.
     */
    header: Record<string, string>;
    /**
     * payload Buffer
     */
    payload: Buffer;
}
export declare class JWKSManager {
    store: any;
    JWK: typeof jose.JWK;
    JWE: typeof jose.JWE;
    constructor(store: any, jwk?: typeof jose.JWK, jwe?: typeof jose.JWE);
    addKey(kid: string | undefined, modulus: number, use: KeyUse): Promise<void>;
    insertKey(jwk: jose.JWK.Key): Promise<void>;
    getPublicJWK(kid?: string): PublicJWK | null;
    getPrivateJWK(kid?: string): PrivateJWK | null;
    getPublicJWKS(): PublicJWKS;
    getPrivateJWKS(): PrivateJWKS;
    removeKey(key: PublicJWK | PrivateJWK): void;
    encrypt(kid: string, input: Buffer): Promise<string>;
    decrypt(payload: any, jwks?: any): Promise<JWKDecryptResult>;
    protected getKey(kid?: string): any;
}
export declare function createJWKS(jwk: typeof jose.JWK, jwks?: JWKS): Promise<any>;
export declare function createJWKSManager(jwks?: JWKS): Promise<JWKSManager>;
