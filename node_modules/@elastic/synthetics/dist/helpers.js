"use strict";
/**
 * MIT License
 *
 * Copyright (c) 2020-present, Elastic NV
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseNetworkConditions = exports.DEFAULT_NETWORK_CONDITIONS_ARG = exports.formatNetworkConditionsArgs = exports.DEFAULT_NETWORK_CONDITIONS = exports.bytesToMegabits = exports.megabitsToBytes = exports.getDurationInUs = exports.CACHE_PATH = exports.formatError = exports.rewriteErrorStack = exports.rewriteErrorMessage = exports.findPWLogsIndexes = exports.totalist = exports.findPkgJsonByTraversing = exports.isFile = exports.isDirectory = exports.isDepInstalled = exports.runParallel = exports.now = exports.getTimestamp = exports.microSecsToSeconds = exports.monotonicTimeInSeconds = exports.generateTempPath = exports.generateUniqueId = exports.symbols = exports.indent = exports.noop = exports.mkdirAsync = exports.writeFileAsync = exports.readFileAsync = void 0;
const colors_1 = require("kleur/colors");
const os_1 = __importDefault(require("os"));
const path_1 = require("path");
const fs_1 = __importDefault(require("fs"));
const util_1 = require("util");
const perf_hooks_1 = require("perf_hooks");
const lstatAsync = (0, util_1.promisify)(fs_1.default.lstat);
const readdirAsync = (0, util_1.promisify)(fs_1.default.readdir);
exports.readFileAsync = (0, util_1.promisify)(fs_1.default.readFile);
exports.writeFileAsync = (0, util_1.promisify)(fs_1.default.writeFile);
exports.mkdirAsync = (0, util_1.promisify)(fs_1.default.mkdir);
const SEPARATOR = '\n';
function noop() { }
exports.noop = noop;
function indent(lines, tab = '   ') {
    return lines.replace(/^/gm, tab);
}
exports.indent = indent;
/**
 *  Disable unicode symbols for windows, the underlying
 *  FS stream has a known issue in windows
 */
const NO_UTF8_SUPPORT = process.platform === 'win32';
exports.symbols = {
    warning: (0, colors_1.yellow)(NO_UTF8_SUPPORT ? '!' : '⚠'),
    skipped: (0, colors_1.cyan)('-'),
    succeeded: (0, colors_1.green)(NO_UTF8_SUPPORT ? 'ok' : '✓'),
    failed: (0, colors_1.red)(NO_UTF8_SUPPORT ? 'x' : '✖'),
};
function generateUniqueId() {
    return `${Date.now() + Math.floor(Math.random() * 1e13)}`;
}
exports.generateUniqueId = generateUniqueId;
function generateTempPath() {
    return (0, path_1.join)(os_1.default.tmpdir(), `synthetics-${generateUniqueId()}`);
}
exports.generateTempPath = generateTempPath;
/**
 * Get Monotonically increasing time in seconds since
 * an arbitrary point in the past.
 *
 * We internally use the monotonically increasing clock timing
 * similar to the chrome devtools protocol network events for
 * journey,step start/end fields to make querying in the UI easier
 */
function monotonicTimeInSeconds() {
    const hrTime = process.hrtime(); // [seconds, nanoseconds]
    return hrTime[0] * 1 + hrTime[1] / 1e9;
}
exports.monotonicTimeInSeconds = monotonicTimeInSeconds;
/**
 * Converts the trace events timestamp field from microsecond
 * resolution to monotonic seconds timestamp similar to other event types (journey, step, etc)
 * Reference - https://github.com/samccone/chrome-trace-event/blob/d45bc8af3b5c53a3adfa2c5fc107b4fae054f579/lib/trace-event.ts#L21-L22
 *
 * Tested and verified on both Darwin and Linux
 */
function microSecsToSeconds(ts) {
    return ts / 1e6;
}
exports.microSecsToSeconds = microSecsToSeconds;
/**
 * Timestamp at which the current node process began.
 */
const processStart = perf_hooks_1.performance.timeOrigin;
function getTimestamp() {
    return (processStart + now()) * 1000;
}
exports.getTimestamp = getTimestamp;
/**
 * Relative current time from the start of the current node process
 */
function now() {
    return perf_hooks_1.performance.now();
}
exports.now = now;
/**
 * Execute all the hooks callbacks in parallel using Promise.all
 */
async function runParallel(callbacks, args) {
    const promises = callbacks.map(cb => cb(args));
    return await Promise.all(promises);
}
exports.runParallel = runParallel;
function isDepInstalled(dep) {
    try {
        return require.resolve(dep);
    }
    catch (e) {
        return false;
    }
}
exports.isDepInstalled = isDepInstalled;
function isDirectory(path) {
    return fs_1.default.existsSync(path) && fs_1.default.statSync(path).isDirectory();
}
exports.isDirectory = isDirectory;
function isFile(filePath) {
    return fs_1.default.existsSync(filePath) && fs_1.default.statSync(filePath).isFile();
}
exports.isFile = isFile;
/**
 * Traverse the directory tree up from the cwd until we find
 * package.json file to check if the user is invoking our script
 * from an NPM project.
 */
function findPkgJsonByTraversing(resolvePath, cwd) {
    const packageJSON = (0, path_1.resolve)(resolvePath, 'package.json');
    if (isFile(packageJSON)) {
        return packageJSON;
    }
    const parentDirectory = (0, path_1.dirname)(resolvePath);
    /**
     * We are in the system root and package.json does not exist
     */
    if (resolvePath === parentDirectory) {
        throw (0, colors_1.red)(`Could not find package.json file in: "${cwd}"\n` +
            `It is recommended to run the agent in an NPM project.\n` +
            `You can create one by running "npm init -y" in the project folder.`);
    }
    return findPkgJsonByTraversing(parentDirectory, cwd);
}
exports.findPkgJsonByTraversing = findPkgJsonByTraversing;
/**
 * Modified version of `totalist` package that handles the symlink issue
 * and avoids infinite recursion
 *
 * Based on code from totalist!
 * https://github.com/lukeed/totalist/blob/44379974e535afe9c38e8d643dd64c59101a14b9/src/async.js#L8
 */
async function totalist(dir, callback, pre = '') {
    dir = (0, path_1.resolve)('.', dir);
    await readdirAsync(dir).then(arr => {
        return Promise.all(arr.map(str => {
            const abs = (0, path_1.join)(dir, str);
            return lstatAsync(abs).then(stats => stats.isDirectory()
                ? totalist(abs, callback, (0, path_1.join)(pre, str))
                : callback((0, path_1.join)(pre, str), abs));
        }));
    });
}
exports.totalist = totalist;
/**
 * Find index of Playwright specific Error logs that is thrown
 * as part of the custom error message/stack
 */
function findPWLogsIndexes(msgOrStack) {
    let startIndex = 0;
    let endIndex = 0;
    if (!msgOrStack) {
        return [startIndex, endIndex];
    }
    const lines = String(msgOrStack).split(SEPARATOR);
    const logStart = /[=]{3,} logs [=]{3,}/;
    const logEnd = /[=]{10,}/;
    lines.forEach((line, index) => {
        if (logStart.test(line)) {
            startIndex = index;
        }
        else if (logEnd.test(line)) {
            endIndex = index;
        }
    });
    return [startIndex, endIndex];
}
exports.findPWLogsIndexes = findPWLogsIndexes;
function rewriteErrorMessage(message, start) {
    if (start === 0) {
        return message;
    }
    return message.split(SEPARATOR).slice(0, start).join(SEPARATOR);
}
exports.rewriteErrorMessage = rewriteErrorMessage;
function rewriteErrorStack(stack, indexes) {
    const [start, end] = indexes;
    /**
     * Do not rewrite if its not a playwright error
     */
    if (start === 0 && end === 0) {
        return stack;
    }
    const linesToKeep = start + 3;
    if (start > 0 && linesToKeep < end) {
        const lines = stack.split(SEPARATOR);
        return lines
            .slice(0, linesToKeep)
            .concat(...lines.slice(end))
            .join(SEPARATOR);
    }
    return stack;
}
exports.rewriteErrorStack = rewriteErrorStack;
function formatError(error) {
    if (!(error instanceof Error)) {
        return;
    }
    const { name, message, stack } = error;
    const indexes = findPWLogsIndexes(message);
    return {
        name,
        message: rewriteErrorMessage(message, indexes[0]),
        stack: rewriteErrorStack(stack, indexes),
    };
}
exports.formatError = formatError;
const cwd = process.cwd();
/**
 * Synthetics cache path that is based on the process id to make sure
 * each process does not modify the caching layer used by other process
 * once we move to executing journeys in parallel
 */
exports.CACHE_PATH = (0, path_1.join)(cwd, '.synthetics', process.pid.toString());
function getDurationInUs(duration) {
    return Math.trunc(duration * 1e6);
}
exports.getDurationInUs = getDurationInUs;
function megabitsToBytes(megabytes) {
    return (megabytes * 1024 * 1024) / 8;
}
exports.megabitsToBytes = megabitsToBytes;
function bytesToMegabits(bytes) {
    return (bytes / 1024 / 1024) * 8;
}
exports.bytesToMegabits = bytesToMegabits;
exports.DEFAULT_NETWORK_CONDITIONS = {
    downloadThroughput: megabitsToBytes(5),
    uploadThroughput: megabitsToBytes(3),
    latency: 20,
    offline: false,
};
// Tranforms CDP dev tools format back to cli args format
function formatNetworkConditionsArgs(networkConditions) {
    const d = bytesToMegabits(networkConditions.downloadThroughput);
    const u = bytesToMegabits(networkConditions.uploadThroughput);
    const l = networkConditions.latency;
    return `${d}d/${u}u/${l}l`;
}
exports.formatNetworkConditionsArgs = formatNetworkConditionsArgs;
exports.DEFAULT_NETWORK_CONDITIONS_ARG = formatNetworkConditionsArgs(exports.DEFAULT_NETWORK_CONDITIONS);
function parseNetworkConditions(args) {
    const uploadToken = 'u';
    const downloadToken = 'd';
    const latencyToken = 'l';
    const networkConditions = {
        ...exports.DEFAULT_NETWORK_CONDITIONS,
    };
    const conditions = args.split('/');
    conditions.forEach(condition => {
        const value = condition.slice(0, condition.length - 1);
        const token = condition.slice(-1);
        switch (token) {
            case uploadToken:
                networkConditions.uploadThroughput = megabitsToBytes(Number(value));
                break;
            case downloadToken:
                networkConditions.downloadThroughput = megabitsToBytes(Number(value));
                break;
            case latencyToken:
                networkConditions.latency = Number(value);
                break;
        }
    });
    return networkConditions;
}
exports.parseNetworkConditions = parseNetworkConditions;
//# sourceMappingURL=helpers.js.map