/**
 * MIT License
 *
 * Copyright (c) 2020-present, Elastic NV
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */
import { Protocol } from 'playwright-chromium/types/protocol';
import { NetworkInfo, Driver } from '../common_types';
import { Step } from '../dsl';
export declare class NetworkManager {
    private driver;
    private _browser;
    private _InflightRequestMap;
    results: Array<NetworkInfo>;
    _currentStep: Partial<Step>;
    constructor(driver: Driver);
    start(): Promise<void>;
    _findNetworkRecord(requestId: string): NetworkInfo;
    _onRequestWillBeSent(event: Protocol.Network.requestWillBeSentPayload): void;
    _onRequestWillBeSentExtraInfo(event: Protocol.Network.requestWillBeSentExtraInfoPayload): void;
    _onDataReceived(event: Protocol.Network.dataReceivedPayload): void;
    _onResponseReceived(event: Protocol.Network.responseReceivedPayload): void;
    _onLoadingFinished(event: Protocol.Network.loadingFinishedPayload): void;
    _onLoadingFailed(event: Protocol.Network.loadingFailedPayload): void;
    _requestCompleted(requestId: string, endTime: number, encodedDataLength?: number): void;
    /**
     * Account for missing response received event and also adjust the
     * response received event based on when first byte event was recorded
     */
    stop(): NetworkInfo[];
}
/**
 * The timing calculations are based on the chrome devtools frontend
 * https://github.com/ChromeDevTools/devtools-frontend/blob/7f5478d8ceb7586f23f4073ab5c2085dac1ec26a/front_end/network/RequestTimingView.js#L98-L193
 */
export declare function calculateTimings(record: NetworkInfo): {
    blocked: number;
    queueing: number;
    dns: number; /**
     * Rewrite the map with new redirect id to not reset
     * the redirect request with original request
     */
    ssl: number;
    proxy: number;
    connect: number;
    send: number;
    wait: number;
    receive: number;
    total: number;
};
//# sourceMappingURL=network.d.ts.map