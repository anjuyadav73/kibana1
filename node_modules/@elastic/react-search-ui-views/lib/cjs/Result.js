"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const view_helpers_1 = require("./view-helpers");
function isFieldValueWrapper(object) {
    return (object &&
        (Object.prototype.hasOwnProperty.call(object, "raw") ||
            Object.prototype.hasOwnProperty.call(object, "snippet")));
}
function getFieldType(result, field, type) {
    if (result[field])
        return result[field][type];
}
function getRaw(result, field) {
    return getFieldType(result, field, "raw");
}
function getSnippet(result, field) {
    return getFieldType(result, field, "snippet");
}
function htmlEscape(str) {
    if (!str)
        return "";
    return String(str)
        .replace(/&/g, "&amp;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#39;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;");
}
function getEscapedField(result, field) {
    // Fallback to raw values here, because non-string fields
    // will not have a snippet fallback. Raw values MUST be html escaped.
    const safeField = getSnippet(result, field) || htmlEscape(getRaw(result, field));
    return Array.isArray(safeField) ? safeField.join(", ") : safeField;
}
function getEscapedFields(result) {
    return Object.keys(result).reduce((acc, field) => {
        // If we receive an arbitrary value from the response, we may not properly
        // handle it, so we should filter out arbitrary values here.
        //
        // I.e.,
        // Arbitrary value: "_metaField: '1939191'"
        // vs.
        // FieldValueWrapper: "_metaField: {raw: '1939191'}"
        if (!isFieldValueWrapper(result[field]))
            return acc;
        return Object.assign(Object.assign({}, acc), { [field]: getEscapedField(result, field) });
    }, {});
}
function Result(_a) {
    var { className, result, onClickLink, titleField, urlField, thumbnailField } = _a, rest = __rest(_a, ["className", "result", "onClickLink", "titleField", "urlField", "thumbnailField"]);
    const fields = getEscapedFields(result);
    const title = getEscapedField(result, titleField);
    const url = (0, view_helpers_1.getUrlSanitizer)(URL, location.href)(getRaw(result, urlField));
    const thumbnail = (0, view_helpers_1.getUrlSanitizer)(URL, location.href)(getRaw(result, thumbnailField));
    return (react_1.default.createElement("li", Object.assign({ className: (0, view_helpers_1.appendClassName)("sui-result", className) }, rest),
        react_1.default.createElement("div", { className: "sui-result__header" },
            title && !url && (react_1.default.createElement("span", { className: "sui-result__title", dangerouslySetInnerHTML: { __html: title } })),
            title && url && (react_1.default.createElement("a", { className: "sui-result__title sui-result__title-link", dangerouslySetInnerHTML: { __html: title }, href: url, onClick: onClickLink, target: "_blank", rel: "noopener noreferrer" }))),
        react_1.default.createElement("div", { className: "sui-result__body" },
            thumbnail && (react_1.default.createElement("div", { className: "sui-result__image" },
                react_1.default.createElement("img", { src: thumbnail, alt: "" }))),
            react_1.default.createElement("ul", { className: "sui-result__details" }, Object.entries(fields).map(([fieldName, fieldValue]) => (react_1.default.createElement("li", { key: fieldName },
                react_1.default.createElement("span", { className: "sui-result__key" }, fieldName),
                " ",
                react_1.default.createElement("span", { className: "sui-result__value", dangerouslySetInnerHTML: { __html: fieldValue } }))))))));
}
exports.default = Result;
