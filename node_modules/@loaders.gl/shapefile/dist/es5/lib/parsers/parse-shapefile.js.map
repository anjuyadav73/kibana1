{"version":3,"sources":["../../../../src/lib/parsers/parse-shapefile.js"],"names":["parseShapefileInBatches","asyncIterator","options","context","gis","reproject","_targetCrs","parseInBatches","fetch","url","loadShapefileSidecarFiles","shx","cpg","prj","SHPLoader","shapeIterator","replaceExtension","dbfResponse","ok","DBFLoader","dbf","encoding","propertyIterator","next","shapeHeader","value","batchType","dbfHeader","iterator","item","geometries","properties","geojsonGeometries","parseGeometries","features","joinProperties","reprojectFeatures","header","data","parseShapefile","arrayBuffer","parse","geom","push","type","i","length","geometry","feature","sourceCrs","targetCrs","projection","Proj4Projection","from","to","coord","project","shxPromise","cpgPromise","prjPromise","Promise","all","shxResponse","cpgResponse","text","prjResponse","newExtension","baseName","basename","extension","extname","isUpperCase","toUpperCase","extIndex","lastIndexOf","substr"],"mappings":"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","sourcesContent":["import {Proj4Projection} from '@math.gl/proj4';\nimport {binaryToGeoJson, transformGeoJsonCoords} from '@loaders.gl/gis';\nimport {parseShx} from './parse-shx';\nimport {zipBatchIterators} from '../streaming/zip-batch-iterators';\nimport {SHPLoader} from '../../shp-loader';\nimport {DBFLoader} from '../../dbf-loader';\n\n// eslint-disable-next-line max-statements, complexity\nexport async function* parseShapefileInBatches(asyncIterator, options, context) {\n  const {reproject = false, _targetCrs = 'WGS84'} = (options && options.gis) || {};\n  const {parseInBatches, fetch, url} = context;\n  const {shx, cpg, prj} = await loadShapefileSidecarFiles(options, context);\n\n  // parse geometries\n  const shapeIterator = await parseInBatches(asyncIterator, SHPLoader, options);\n\n  // parse properties\n  let propertyIterator;\n  const dbfResponse = await fetch(replaceExtension(url, 'dbf'));\n  if (dbfResponse.ok) {\n    propertyIterator = await parseInBatches(dbfResponse, DBFLoader, {\n      ...options,\n      dbf: {encoding: cpg || 'latin1'}\n    });\n  }\n\n  // When `options.metadata` is `true`, there's an extra initial `metadata`\n  // object before the iterator starts. zipBatchIterators expects to receive\n  // batches of Array objects, and will fail with non-iterable batches, so it's\n  // important to skip over the first batch.\n  let shapeHeader = (await shapeIterator.next()).value;\n  if (shapeHeader && shapeHeader.batchType === 'metadata') {\n    shapeHeader = (await shapeIterator.next()).value;\n  }\n\n  let dbfHeader = {};\n  if (propertyIterator) {\n    dbfHeader = (await propertyIterator.next()).value;\n    if (dbfHeader && dbfHeader.batchType === 'metadata') {\n      dbfHeader = (await propertyIterator.next()).value;\n    }\n  }\n\n  let iterator;\n  if (propertyIterator) {\n    iterator = await zipBatchIterators(shapeIterator, propertyIterator);\n  } else {\n    iterator = shapeIterator;\n  }\n\n  for await (const item of iterator) {\n    let geometries;\n    let properties;\n    if (!propertyIterator) {\n      geometries = item;\n    } else {\n      [geometries, properties] = item;\n    }\n\n    const geojsonGeometries = parseGeometries(geometries);\n    let features = joinProperties(geojsonGeometries, properties);\n    if (reproject) {\n      features = reprojectFeatures(features, prj, _targetCrs);\n    }\n    yield {\n      encoding: cpg,\n      prj,\n      shx,\n      header: shapeHeader,\n      data: features\n    };\n  }\n}\n\nexport async function parseShapefile(arrayBuffer, options, context) {\n  const {reproject = false, _targetCrs = 'WGS84'} = (options && options.gis) || {};\n  const {parse} = context;\n  const {shx, cpg, prj} = await loadShapefileSidecarFiles(options, context);\n\n  // parse geometries\n  const {header, geometries} = await parse(arrayBuffer, SHPLoader, options); // {shp: shx}\n\n  const geojsonGeometries = parseGeometries(geometries);\n\n  // parse properties\n  let properties = [];\n  const {url, fetch} = context;\n  const dbfResponse = await fetch(replaceExtension(url, 'dbf'));\n  if (dbfResponse.ok) {\n    properties = await parse(dbfResponse, DBFLoader, {dbf: {encoding: cpg || 'latin1'}});\n  }\n\n  let features = joinProperties(geojsonGeometries, properties);\n  if (reproject) {\n    features = reprojectFeatures(features, prj, _targetCrs);\n  }\n\n  return {\n    encoding: cpg,\n    prj,\n    shx,\n    header,\n    data: features\n  };\n}\n\nfunction parseGeometries(geometries) {\n  const geojsonGeometries = [];\n  for (const geom of geometries) {\n    geojsonGeometries.push(binaryToGeoJson(geom, geom.type, 'geometry'));\n  }\n\n  return geojsonGeometries;\n}\n\n/**\n * Join properties and geometries into features\n *\n * @param  {object[]} geometries [description]\n * @param  {object[]?} properties [description]\n * @return {object[]}            [description]\n */\nfunction joinProperties(geometries, properties) {\n  const features = [];\n  for (let i = 0; i < geometries.length; i++) {\n    const geometry = geometries[i];\n    const feature = {\n      type: 'Feature',\n      geometry,\n      // properties can be undefined if dbfResponse above was empty\n      properties: (properties && properties[i]) || {}\n    };\n    features.push(feature);\n  }\n\n  return features;\n}\n\n/**\n * Reproject GeoJSON features to output CRS\n *\n * @param  {object[]} features parsed GeoJSON features\n * @param  {string} sourceCrs source coordinate reference system\n * @param  {string} targetCrs †arget coordinate reference system\n * @return {object[]} Reprojected Features\n */\nfunction reprojectFeatures(features, sourceCrs, targetCrs) {\n  const projection = new Proj4Projection({from: sourceCrs || 'WGS84', to: targetCrs || 'WGS84'});\n  return transformGeoJsonCoords(features, coord => projection.project(coord));\n}\n\n// eslint-disable-next-line max-statements\nexport async function loadShapefileSidecarFiles(options, context) {\n  // Attempt a parallel load of the small sidecar files\n  const {url, fetch} = context;\n  const shxPromise = fetch(replaceExtension(url, 'shx'));\n  const cpgPromise = fetch(replaceExtension(url, 'cpg'));\n  const prjPromise = fetch(replaceExtension(url, 'prj'));\n  await Promise.all([shxPromise, cpgPromise, prjPromise]);\n\n  let shx = null;\n  let cpg = null;\n  let prj = null;\n\n  const shxResponse = await shxPromise;\n  if (shxResponse.ok) {\n    const arrayBuffer = await shxResponse.arrayBuffer();\n    shx = parseShx(arrayBuffer);\n  }\n\n  const cpgResponse = await cpgPromise;\n  if (cpgResponse.ok) {\n    cpg = await cpgResponse.text();\n  }\n\n  const prjResponse = await prjPromise;\n  if (prjResponse.ok) {\n    prj = await prjResponse.text();\n  }\n\n  return {\n    shx,\n    cpg,\n    prj\n  };\n}\n\nexport function replaceExtension(url, newExtension) {\n  const baseName = basename(url);\n  const extension = extname(url);\n  const isUpperCase = extension === extension.toUpperCase();\n  if (isUpperCase) {\n    newExtension = newExtension.toUpperCase();\n  }\n  return `${baseName}.${newExtension}`;\n}\n\n// NOTE - this gives the entire path minus extension (i.e. NOT same as path.basename)\nfunction basename(url) {\n  const extIndex = url && url.lastIndexOf('.');\n  return extIndex >= 0 ? url.substr(0, extIndex) : '';\n}\n\nfunction extname(url) {\n  const extIndex = url && url.lastIndexOf('.');\n  return extIndex >= 0 ? url.substr(extIndex + 1) : '';\n}\n"],"file":"parse-shapefile.js"}