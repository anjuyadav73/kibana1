{"version":3,"sources":["../../../../src/lib/parsers/parse-dbf.js"],"names":["LITTLE_ENDIAN","DBF_HEADER_SIZE","STATE","START","FIELD_DESCRIPTORS","FIELD_PROPERTIES","END","ERROR","DBFParser","encoding","binaryReader","BinaryChunkReader","textDecoder","TextDecoder","state","result","data","schema","arrayBuffer","write","parseState","end","error","parseDBF","options","loaderOptions","dbf","dbfParser","tables","format","rows","parseDBFInBatches","asyncIterator","parser","headerReturned","dbfHeader","length","dataView","getDataView","parseDBFHeader","progress","bytesUsed","rowsTotal","nRecords","fieldDescriptorView","headerLength","dbfFields","parseFieldDescriptors","Schema","map","dbfField","makeField","skip","recordLength","recordView","row","parseRow","push","message","headerView","year","getUint8","month","day","getUint32","getUint16","languageDriver","view","nFields","byteLength","fields","offset","i","name","decode","Uint8Array","buffer","byteOffset","replace","dataType","String","fromCharCode","fieldLength","decimal","out","field","text","parseField","parseNumber","parseCharacter","parseDate","parseBoolean","Error","str","Date","UTC","slice","parseInt","value","test","number","parseFloat","isNaN","trim","Field","Float64","Utf8","TimestampMillisecond","Bool"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;AAGA;;;;;;;;AAEA,IAAMA,aAAa,GAAG,IAAtB;AACA,IAAMC,eAAe,GAAG,EAAxB;AAEA,IAAMC,KAAK,GAAG;AACZC,EAAAA,KAAK,EAAE,CADK;AAEZC,EAAAA,iBAAiB,EAAE,CAFP;AAGZC,EAAAA,gBAAgB,EAAE,CAHN;AAIZC,EAAAA,GAAG,EAAE,CAJO;AAKZC,EAAAA,KAAK,EAAE;AALK,CAAd;;IAQMC,S;AACJ,2BAAwB;AAAA,QAAXC,QAAW,QAAXA,QAAW;AAAA;AACtB,SAAKC,YAAL,GAAoB,IAAIC,6BAAJ,EAApB;AACA,SAAKC,WAAL,GAAmB,IAAIC,WAAJ,CAAgBJ,QAAhB,CAAnB;AACA,SAAKK,KAAL,GAAaZ,KAAK,CAACC,KAAnB;AACA,SAAKY,MAAL,GAAc;AACZC,MAAAA,IAAI,EAAE,EADM;AAEZC,MAAAA,MAAM,EAAE;AAFI,KAAd;AAID;;;;0BAEKC,W,EAAa;AACjB,WAAKR,YAAL,CAAkBS,KAAlB,CAAwBD,WAAxB;AACA,WAAKJ,KAAL,GAAaM,UAAU,CAAC,KAAKN,KAAN,EAAa,KAAKC,MAAlB,EAA0B,KAAKL,YAA/B,EAA6C,KAAKE,WAAlD,CAAvB;AAOD;;;0BAEK;AACJ,WAAKF,YAAL,CAAkBW,GAAlB;AACA,WAAKP,KAAL,GAAaM,UAAU,CAAC,KAAKN,KAAN,EAAa,KAAKC,MAAlB,EAA0B,KAAKL,YAA/B,EAA6C,KAAKE,WAAlD,CAAvB;;AAEA,UAAI,KAAKE,KAAL,KAAeZ,KAAK,CAACI,GAAzB,EAA8B;AAC5B,aAAKQ,KAAL,GAAaZ,KAAK,CAACK,KAAnB;AACA,aAAKQ,MAAL,CAAYO,KAAZ,GAAoB,qBAApB;AACD;AACF;;;;;AAGI,SAASC,QAAT,CAAkBL,WAAlB,EAA+BM,OAA/B,EAAwC;AAC7C,MAAMC,aAAa,GAAGD,OAAO,CAACE,GAAR,IAAe,EAArC;AAD6C,MAEtCjB,QAFsC,GAE1BgB,aAF0B,CAEtChB,QAFsC;AAI7C,MAAMkB,SAAS,GAAG,IAAInB,SAAJ,CAAc;AAACC,IAAAA,QAAQ,EAARA;AAAD,GAAd,CAAlB;AACAkB,EAAAA,SAAS,CAACR,KAAV,CAAgBD,WAAhB;AACAS,EAAAA,SAAS,CAACN,GAAV;AAN6C,0BAQtBM,SAAS,CAACZ,MARY;AAAA,MAQtCC,IARsC,qBAQtCA,IARsC;AAAA,MAQhCC,MARgC,qBAQhCA,MARgC;;AAS7C,UAAQO,OAAO,CAACI,MAAR,IAAkBJ,OAAO,CAACI,MAAR,CAAeC,MAAzC;AACE,SAAK,OAAL;AAEE,aAAO;AAACZ,QAAAA,MAAM,EAANA,MAAD;AAASa,QAAAA,IAAI,EAAEd;AAAf,OAAP;;AAEF,SAAK,MAAL;AACA;AACE,aAAOA,IAAP;AAPJ;AASD;;SAEsBe,iB;;;;;yFAAhB,iBAAkCC,aAAlC,EAAiDR,OAAjD;AAAA;;AAAA;AAAA;AAAA;AAAA;AACCC,YAAAA,aADD,GACiBD,OAAO,CAACE,GAAR,IAAe,EADhC;AAEEjB,YAAAA,QAFF,GAEcgB,aAFd,CAEEhB,QAFF;AAICwB,YAAAA,MAJD,GAIU,IAAIzB,SAAJ,CAAc;AAACC,cAAAA,QAAQ,EAARA;AAAD,aAAd,CAJV;AAKDyB,YAAAA,cALC,GAKgB,KALhB;AAAA;AAAA;AAAA;AAAA,wDAM2BF,aAN3B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAMYd,YAAAA,WANZ;AAOHe,YAAAA,MAAM,CAACd,KAAP,CAAaD,WAAb;;AAPG,kBAQC,CAACgB,cAAD,IAAmBD,MAAM,CAAClB,MAAP,CAAcoB,SARlC;AAAA;AAAA;AAAA;;AASDD,YAAAA,cAAc,GAAG,IAAjB;AATC;AAUD,mBAAMD,MAAM,CAAClB,MAAP,CAAcoB,SAApB;;AAVC;AAAA,kBAaCF,MAAM,CAAClB,MAAP,CAAcC,IAAd,CAAmBoB,MAAnB,GAA4B,CAb7B;AAAA;AAAA;AAAA;;AAAA;AAcD,mBAAMH,MAAM,CAAClB,MAAP,CAAcC,IAApB;;AAdC;AAeDiB,YAAAA,MAAM,CAAClB,MAAP,CAAcC,IAAd,GAAqB,EAArB;;AAfC;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAkBLiB,YAAAA,MAAM,CAACZ,GAAP;;AAlBK,kBAmBDY,MAAM,CAAClB,MAAP,CAAcC,IAAd,CAAmBoB,MAAnB,GAA4B,CAnB3B;AAAA;AAAA;AAAA;;AAAA;AAoBH,mBAAMH,MAAM,CAAClB,MAAP,CAAcC,IAApB;;AApBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA0BP,SAASI,UAAT,CAAoBN,KAApB,EAAmE;AAAA,MAAxCC,MAAwC,uEAA/B,EAA+B;AAAA,MAA3BL,YAA2B;AAAA,MAAbE,WAAa;;AAEjE,SAAO,IAAP,EAAa;AACX,QAAI;AACF,cAAQE,KAAR;AACE,aAAKZ,KAAK,CAACK,KAAX;AACA,aAAKL,KAAK,CAACI,GAAX;AACE,iBAAOQ,KAAP;;AAEF,aAAKZ,KAAK,CAACC,KAAX;AAEE,cAAMkC,QAAQ,GAAG3B,YAAY,CAAC4B,WAAb,CAAyBrC,eAAzB,EAA0C,YAA1C,CAAjB;;AACA,cAAI,CAACoC,QAAL,EAAe;AACb,mBAAOvB,KAAP;AACD;;AACDC,UAAAA,MAAM,CAACoB,SAAP,GAAmBI,cAAc,CAACF,QAAD,CAAjC;AACAtB,UAAAA,MAAM,CAACyB,QAAP,GAAkB;AAChBC,YAAAA,SAAS,EAAE,CADK;AAEhBC,YAAAA,SAAS,EAAE3B,MAAM,CAACoB,SAAP,CAAiBQ,QAFZ;AAGhBb,YAAAA,IAAI,EAAE;AAHU,WAAlB;AAKAhB,UAAAA,KAAK,GAAGZ,KAAK,CAACE,iBAAd;AACA;;AAEF,aAAKF,KAAK,CAACE,iBAAX;AAEE,cAAMwC,mBAAmB,GAAGlC,YAAY,CAAC4B,WAAb,CAC1BvB,MAAM,CAACoB,SAAP,CAAiBU,YAAjB,GAAgC5C,eADN,EAE1B,uBAF0B,CAA5B;;AAIA,cAAI,CAAC2C,mBAAL,EAA0B;AACxB,mBAAO9B,KAAP;AACD;;AAEDC,UAAAA,MAAM,CAAC+B,SAAP,GAAmBC,qBAAqB,CAACH,mBAAD,EAAsBhC,WAAtB,CAAxC;AACAG,UAAAA,MAAM,CAACE,MAAP,GAAgB,IAAI+B,cAAJ,CAAWjC,MAAM,CAAC+B,SAAP,CAAiBG,GAAjB,CAAqB,UAAAC,QAAQ;AAAA,mBAAIC,SAAS,CAACD,QAAD,CAAb;AAAA,WAA7B,CAAX,CAAhB;AAEApC,UAAAA,KAAK,GAAGZ,KAAK,CAACG,gBAAd;AAIAK,UAAAA,YAAY,CAAC0C,IAAb,CAAkB,CAAlB;AACA;;AAEF,aAAKlD,KAAK,CAACG,gBAAX;AAAA,cACSgD,YADT,GACyBtC,MAAM,CAACoB,SADhC,CACSkB,YADT;;AAEE,iBAAOtC,MAAM,CAACC,IAAP,CAAYoB,MAAZ,GAAqBrB,MAAM,CAACoB,SAAP,CAAiBQ,QAA7C,EAAuD;AACrD,gBAAMW,UAAU,GAAG5C,YAAY,CAAC4B,WAAb,CAAyBe,YAAY,GAAG,CAAxC,CAAnB;;AACA,gBAAI,CAACC,UAAL,EAAiB;AACf,qBAAOxC,KAAP;AACD;;AAEDJ,YAAAA,YAAY,CAAC0C,IAAb,CAAkB,CAAlB;AAEA,gBAAMG,GAAG,GAAGC,QAAQ,CAACF,UAAD,EAAavC,MAAM,CAAC+B,SAApB,EAA+BlC,WAA/B,CAApB;AACAG,YAAAA,MAAM,CAACC,IAAP,CAAYyC,IAAZ,CAAiBF,GAAjB;AACAxC,YAAAA,MAAM,CAACyB,QAAP,CAAgBV,IAAhB,GAAuBf,MAAM,CAACC,IAAP,CAAYoB,MAAnC;AACD;;AACDtB,UAAAA,KAAK,GAAGZ,KAAK,CAACI,GAAd;AACA;;AAEF;AACEQ,UAAAA,KAAK,GAAGZ,KAAK,CAACK,KAAd;AACAQ,UAAAA,MAAM,CAACO,KAAP,kCAAuCR,KAAvC;AACA,iBAAOA,KAAP;AA5DJ;AA8DD,KA/DD,CA+DE,OAAOQ,KAAP,EAAc;AACdR,MAAAA,KAAK,GAAGZ,KAAK,CAACK,KAAd;AACAQ,MAAAA,MAAM,CAACO,KAAP,iCAAsCA,KAAK,CAACoC,OAA5C;AACA,aAAO5C,KAAP;AACD;AACF;AACF;;AAKD,SAASyB,cAAT,CAAwBoB,UAAxB,EAAoC;AAClC,SAAO;AAELC,IAAAA,IAAI,EAAED,UAAU,CAACE,QAAX,CAAoB,CAApB,IAAyB,IAF1B;AAGLC,IAAAA,KAAK,EAAEH,UAAU,CAACE,QAAX,CAAoB,CAApB,CAHF;AAILE,IAAAA,GAAG,EAAEJ,UAAU,CAACE,QAAX,CAAoB,CAApB,CAJA;AAMLlB,IAAAA,QAAQ,EAAEgB,UAAU,CAACK,SAAX,CAAqB,CAArB,EAAwBhE,aAAxB,CANL;AAQL6C,IAAAA,YAAY,EAAEc,UAAU,CAACM,SAAX,CAAqB,CAArB,EAAwBjE,aAAxB,CART;AAULqD,IAAAA,YAAY,EAAEM,UAAU,CAACM,SAAX,CAAqB,EAArB,EAAyBjE,aAAzB,CAVT;AAYLkE,IAAAA,cAAc,EAAEP,UAAU,CAACE,QAAX,CAAoB,EAApB;AAZX,GAAP;AAcD;;AAKD,SAASd,qBAAT,CAA+BoB,IAA/B,EAAqCvD,WAArC,EAAkD;AAGhD,MAAMwD,OAAO,GAAG,CAACD,IAAI,CAACE,UAAL,GAAkB,CAAnB,IAAwB,EAAxC;AACA,MAAMC,MAAM,GAAG,EAAf;AACA,MAAIC,MAAM,GAAG,CAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,OAApB,EAA6BI,CAAC,EAA9B,EAAkC;AAChC,QAAMC,IAAI,GAAG7D,WAAW,CACrB8D,MADU,CACH,IAAIC,UAAJ,CAAeR,IAAI,CAACS,MAApB,EAA4BT,IAAI,CAACU,UAAL,GAAkBN,MAA9C,EAAsD,EAAtD,CADG,EAGVO,OAHU,CAGF,SAHE,EAGS,EAHT,CAAb;AAKAR,IAAAA,MAAM,CAACb,IAAP,CAAY;AACVgB,MAAAA,IAAI,EAAJA,IADU;AAEVM,MAAAA,QAAQ,EAAEC,MAAM,CAACC,YAAP,CAAoBd,IAAI,CAACN,QAAL,CAAcU,MAAM,GAAG,EAAvB,CAApB,CAFA;AAGVW,MAAAA,WAAW,EAAEf,IAAI,CAACN,QAAL,CAAcU,MAAM,GAAG,EAAvB,CAHH;AAIVY,MAAAA,OAAO,EAAEhB,IAAI,CAACN,QAAL,CAAcU,MAAM,GAAG,EAAvB;AAJC,KAAZ;AAMAA,IAAAA,MAAM,IAAI,EAAV;AACD;;AACD,SAAOD,MAAP;AACD;;AAmBD,SAASd,QAAT,CAAkBW,IAAlB,EAAwBG,MAAxB,EAAgC1D,WAAhC,EAA6C;AAC3C,MAAMwE,GAAG,GAAG,EAAZ;AACA,MAAIb,MAAM,GAAG,CAAb;;AAF2C,8CAGvBD,MAHuB;AAAA;;AAAA;AAG3C,2DAA4B;AAAA,UAAjBe,KAAiB;AAC1B,UAAMC,IAAI,GAAG1E,WAAW,CAAC8D,MAAZ,CACX,IAAIC,UAAJ,CAAeR,IAAI,CAACS,MAApB,EAA4BT,IAAI,CAACU,UAAL,GAAkBN,MAA9C,EAAsDc,KAAK,CAACH,WAA5D,CADW,CAAb;AAGAE,MAAAA,GAAG,CAACC,KAAK,CAACZ,IAAP,CAAH,GAAkBc,UAAU,CAACD,IAAD,EAAOD,KAAK,CAACN,QAAb,CAA5B;AACAR,MAAAA,MAAM,IAAIc,KAAK,CAACH,WAAhB;AACD;AAT0C;AAAA;AAAA;AAAA;AAAA;;AAW3C,SAAOE,GAAP;AACD;;AAGD,SAASG,UAAT,CAAoBD,IAApB,EAA0BP,QAA1B,EAAoC;AAClC,UAAQA,QAAR;AACE,SAAK,GAAL;AACE,aAAOS,WAAW,CAACF,IAAD,CAAlB;;AACF,SAAK,GAAL;AACE,aAAOG,cAAc,CAACH,IAAD,CAArB;;AACF,SAAK,GAAL;AACE,aAAOE,WAAW,CAACF,IAAD,CAAlB;;AACF,SAAK,GAAL;AACE,aAAOE,WAAW,CAACF,IAAD,CAAlB;;AACF,SAAK,GAAL;AACE,aAAOE,WAAW,CAACF,IAAD,CAAlB;;AACF,SAAK,GAAL;AACE,aAAOI,SAAS,CAACJ,IAAD,CAAhB;;AACF,SAAK,GAAL;AACE,aAAOK,YAAY,CAACL,IAAD,CAAnB;;AACF;AACE,YAAM,IAAIM,KAAJ,CAAU,uBAAV,CAAN;AAhBJ;AAkBD;;AAGD,SAASF,SAAT,CAAmBG,GAAnB,EAAwB;AACtB,SAAOC,IAAI,CAACC,GAAL,CAASF,GAAG,CAACG,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAT,EAA0BC,QAAQ,CAACJ,GAAG,CAACG,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAD,EAAkB,EAAlB,CAAR,GAAgC,CAA1D,EAA6DH,GAAG,CAACG,KAAJ,CAAU,CAAV,EAAa,CAAb,CAA7D,CAAP;AACD;;AAMD,SAASL,YAAT,CAAsBO,KAAtB,EAA6B;AAC3B,SAAO,UAAUC,IAAV,CAAeD,KAAf,IAAwB,KAAxB,GAAgC,UAAUC,IAAV,CAAeD,KAAf,IAAwB,IAAxB,GAA+B,IAAtE;AACD;;AAGD,SAASV,WAAT,CAAqBF,IAArB,EAA2B;AACzB,MAAMc,MAAM,GAAGC,UAAU,CAACf,IAAD,CAAzB;AACA,SAAOgB,KAAK,CAACF,MAAD,CAAL,GAAgB,IAAhB,GAAuBA,MAA9B;AACD;;AAED,SAASX,cAAT,CAAwBH,IAAxB,EAA8B;AAC5B,SAAOA,IAAI,CAACiB,IAAL,MAAe,IAAtB;AACD;;AAMD,SAASpD,SAAT,QAA2D;AAAA,MAAvCsB,IAAuC,SAAvCA,IAAuC;AAAA,MAAjCM,QAAiC,SAAjCA,QAAiC;AAAA,MAAvBG,WAAuB,SAAvBA,WAAuB;AAAA,MAAVC,OAAU,SAAVA,OAAU;;AACzD,UAAQJ,QAAR;AACE,SAAK,GAAL;AACE,aAAO,IAAIyB,aAAJ,CAAU/B,IAAV,EAAgB,IAAIgC,eAAJ,EAAhB,EAA+B,IAA/B,CAAP;;AACF,SAAK,GAAL;AACE,aAAO,IAAID,aAAJ,CAAU/B,IAAV,EAAgB,IAAIiC,YAAJ,EAAhB,EAA4B,IAA5B,CAAP;;AACF,SAAK,GAAL;AACE,aAAO,IAAIF,aAAJ,CAAU/B,IAAV,EAAgB,IAAIgC,eAAJ,EAAhB,EAA+B,IAA/B,CAAP;;AACF,SAAK,GAAL;AACE,aAAO,IAAID,aAAJ,CAAU/B,IAAV,EAAgB,IAAIgC,eAAJ,EAAhB,EAA+B,IAA/B,CAAP;;AACF,SAAK,GAAL;AACE,aAAO,IAAID,aAAJ,CAAU/B,IAAV,EAAgB,IAAIgC,eAAJ,EAAhB,EAA+B,IAA/B,CAAP;;AACF,SAAK,GAAL;AACE,aAAO,IAAID,aAAJ,CAAU/B,IAAV,EAAgB,IAAIkC,4BAAJ,EAAhB,EAA4C,IAA5C,CAAP;;AACF,SAAK,GAAL;AACE,aAAO,IAAIH,aAAJ,CAAU/B,IAAV,EAAgB,IAAImC,YAAJ,EAAhB,EAA4B,IAA5B,CAAP;;AACF;AACE,YAAM,IAAIhB,KAAJ,CAAU,uBAAV,CAAN;AAhBJ;AAkBD","sourcesContent":["import {Schema, Field, Bool, Utf8, Float64, TimestampMillisecond} from '@loaders.gl/tables';\n\n/* global TextDecoder */\nimport BinaryChunkReader from '../streaming/binary-chunk-reader';\n\nconst LITTLE_ENDIAN = true;\nconst DBF_HEADER_SIZE = 32;\n\nconst STATE = {\n  START: 0, // Expecting header\n  FIELD_DESCRIPTORS: 1,\n  FIELD_PROPERTIES: 2,\n  END: 3,\n  ERROR: 4\n};\n\nclass DBFParser {\n  constructor({encoding}) {\n    this.binaryReader = new BinaryChunkReader();\n    this.textDecoder = new TextDecoder(encoding);\n    this.state = STATE.START;\n    this.result = {\n      data: [],\n      schema: null\n    };\n  }\n\n  write(arrayBuffer) {\n    this.binaryReader.write(arrayBuffer);\n    this.state = parseState(this.state, this.result, this.binaryReader, this.textDecoder);\n    // this.result.progress.bytesUsed = this.binaryReader.bytesUsed();\n\n    // important events:\n    // - schema available\n    // - first rows available\n    // - all rows available\n  }\n\n  end() {\n    this.binaryReader.end();\n    this.state = parseState(this.state, this.result, this.binaryReader, this.textDecoder);\n    // this.result.progress.bytesUsed = this.binaryReader.bytesUsed();\n    if (this.state !== STATE.END) {\n      this.state = STATE.ERROR;\n      this.result.error = 'DBF incomplete file';\n    }\n  }\n}\n\nexport function parseDBF(arrayBuffer, options) {\n  const loaderOptions = options.dbf || {};\n  const {encoding} = loaderOptions;\n\n  const dbfParser = new DBFParser({encoding});\n  dbfParser.write(arrayBuffer);\n  dbfParser.end();\n\n  const {data, schema} = dbfParser.result;\n  switch (options.tables && options.tables.format) {\n    case 'table':\n      // TODO - parse columns\n      return {schema, rows: data};\n\n    case 'rows':\n    default:\n      return data;\n  }\n}\n\nexport async function* parseDBFInBatches(asyncIterator, options) {\n  const loaderOptions = options.dbf || {};\n  const {encoding} = loaderOptions;\n\n  const parser = new DBFParser({encoding});\n  let headerReturned = false;\n  for await (const arrayBuffer of asyncIterator) {\n    parser.write(arrayBuffer);\n    if (!headerReturned && parser.result.dbfHeader) {\n      headerReturned = true;\n      yield parser.result.dbfHeader;\n    }\n\n    if (parser.result.data.length > 0) {\n      yield parser.result.data;\n      parser.result.data = [];\n    }\n  }\n  parser.end();\n  if (parser.result.data.length > 0) {\n    yield parser.result.data;\n  }\n}\n\n// https://www.dbase.com/Knowledgebase/INT/db7_file_fmt.htm\n/* eslint-disable complexity, max-depth */\nfunction parseState(state, result = {}, binaryReader, textDecoder) {\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    try {\n      switch (state) {\n        case STATE.ERROR:\n        case STATE.END:\n          return state;\n\n        case STATE.START:\n          // Parse initial file header\n          const dataView = binaryReader.getDataView(DBF_HEADER_SIZE, 'DBF header');\n          if (!dataView) {\n            return state;\n          }\n          result.dbfHeader = parseDBFHeader(dataView);\n          result.progress = {\n            bytesUsed: 0,\n            rowsTotal: result.dbfHeader.nRecords,\n            rows: 0\n          };\n          state = STATE.FIELD_DESCRIPTORS;\n          break;\n\n        case STATE.FIELD_DESCRIPTORS:\n          // Parse DBF field descriptors (schema)\n          const fieldDescriptorView = binaryReader.getDataView(\n            result.dbfHeader.headerLength - DBF_HEADER_SIZE,\n            'DBF field descriptors'\n          );\n          if (!fieldDescriptorView) {\n            return state;\n          }\n\n          result.dbfFields = parseFieldDescriptors(fieldDescriptorView, textDecoder);\n          result.schema = new Schema(result.dbfFields.map(dbfField => makeField(dbfField)));\n\n          state = STATE.FIELD_PROPERTIES;\n\n          // TODO(kyle) Not exactly sure why start offset needs to be headerLength + 1?\n          // parsedbf uses ((fields.length + 1) << 5) + 2;\n          binaryReader.skip(1);\n          break;\n\n        case STATE.FIELD_PROPERTIES:\n          const {recordLength} = result.dbfHeader;\n          while (result.data.length < result.dbfHeader.nRecords) {\n            const recordView = binaryReader.getDataView(recordLength - 1);\n            if (!recordView) {\n              return state;\n            }\n            // Note: Avoid actually reading the last byte, which may not be present\n            binaryReader.skip(1);\n\n            const row = parseRow(recordView, result.dbfFields, textDecoder);\n            result.data.push(row);\n            result.progress.rows = result.data.length;\n          }\n          state = STATE.END;\n          break;\n\n        default:\n          state = STATE.ERROR;\n          result.error = `illegal parser state ${state}`;\n          return state;\n      }\n    } catch (error) {\n      state = STATE.ERROR;\n      result.error = `DBF parsing failed: ${error.message}`;\n      return state;\n    }\n  }\n}\n\n/**\n * @param {DataView} headerView\n */\nfunction parseDBFHeader(headerView) {\n  return {\n    // Last updated date\n    year: headerView.getUint8(1) + 1900,\n    month: headerView.getUint8(2),\n    day: headerView.getUint8(3),\n    // Number of records in data file\n    nRecords: headerView.getUint32(4, LITTLE_ENDIAN),\n    // Length of header in bytes\n    headerLength: headerView.getUint16(8, LITTLE_ENDIAN),\n    // Length of each record\n    recordLength: headerView.getUint16(10, LITTLE_ENDIAN),\n    // Not sure if this is usually set\n    languageDriver: headerView.getUint8(29)\n  };\n}\n\n/**\n * @param {DataView} view\n */\nfunction parseFieldDescriptors(view, textDecoder) {\n  // NOTE: this might overestimate the number of fields if the \"Database\n  // Container\" container exists and is included in the headerLength\n  const nFields = (view.byteLength - 1) / 32;\n  const fields = [];\n  let offset = 0;\n  for (let i = 0; i < nFields; i++) {\n    const name = textDecoder\n      .decode(new Uint8Array(view.buffer, view.byteOffset + offset, 11))\n      // eslint-disable-next-line no-control-regex\n      .replace(/\\u0000/g, '');\n\n    fields.push({\n      name,\n      dataType: String.fromCharCode(view.getUint8(offset + 11)),\n      fieldLength: view.getUint8(offset + 16),\n      decimal: view.getUint8(offset + 17)\n    });\n    offset += 32;\n  }\n  return fields;\n}\n\n/*\n * @param {BinaryChunkReader} binaryReader\nfunction parseRows(binaryReader, fields, nRecords, recordLength, textDecoder) {\n  const rows = [];\n  for (let i = 0; i < nRecords; i++) {\n    const recordView = binaryReader.getDataView(recordLength - 1);\n    binaryReader.skip(1);\n    // @ts-ignore\n    rows.push(parseRow(recordView, fields, textDecoder));\n  }\n  return rows;\n}\n */\n\n/**\n * @param {DataView} view\n */\nfunction parseRow(view, fields, textDecoder) {\n  const out = {};\n  let offset = 0;\n  for (const field of fields) {\n    const text = textDecoder.decode(\n      new Uint8Array(view.buffer, view.byteOffset + offset, field.fieldLength)\n    );\n    out[field.name] = parseField(text, field.dataType);\n    offset += field.fieldLength;\n  }\n\n  return out;\n}\n\n// Should NaN be coerced to null?\nfunction parseField(text, dataType) {\n  switch (dataType) {\n    case 'B':\n      return parseNumber(text);\n    case 'C':\n      return parseCharacter(text);\n    case 'F':\n      return parseNumber(text);\n    case 'N':\n      return parseNumber(text);\n    case 'O':\n      return parseNumber(text);\n    case 'D':\n      return parseDate(text);\n    case 'L':\n      return parseBoolean(text);\n    default:\n      throw new Error('Unsupported data type');\n  }\n}\n\n// Parse YYYYMMDD to date in milliseconds\nfunction parseDate(str) {\n  return Date.UTC(str.slice(0, 4), parseInt(str.slice(4, 6), 10) - 1, str.slice(6, 8));\n}\n\n// Read boolean value\n// any of Y, y, T, t coerce to true\n// any of N, n, F, f coerce to false\n// otherwise null\nfunction parseBoolean(value) {\n  return /^[nf]$/i.test(value) ? false : /^[yt]$/i.test(value) ? true : null;\n}\n\n// Return null instead of NaN\nfunction parseNumber(text) {\n  const number = parseFloat(text);\n  return isNaN(number) ? null : number;\n}\n\nfunction parseCharacter(text) {\n  return text.trim() || null;\n}\n\n/**\n * Create a standard Arrow-style `Field` from field descriptor.\n * TODO - use `fieldLength` and `decimal` to generate smaller types?\n */\nfunction makeField({name, dataType, fieldLength, decimal}) {\n  switch (dataType) {\n    case 'B':\n      return new Field(name, new Float64(), true);\n    case 'C':\n      return new Field(name, new Utf8(), true);\n    case 'F':\n      return new Field(name, new Float64(), true);\n    case 'N':\n      return new Field(name, new Float64(), true);\n    case 'O':\n      return new Field(name, new Float64(), true);\n    case 'D':\n      return new Field(name, new TimestampMillisecond(), true);\n    case 'L':\n      return new Field(name, new Bool(), true);\n    default:\n      throw new Error('Unsupported data type');\n  }\n}\n"],"file":"parse-dbf.js"}