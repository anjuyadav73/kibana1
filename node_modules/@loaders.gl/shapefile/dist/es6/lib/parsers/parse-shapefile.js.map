{"version":3,"sources":["../../../../src/lib/parsers/parse-shapefile.js"],"names":["Proj4Projection","binaryToGeoJson","transformGeoJsonCoords","parseShx","zipBatchIterators","SHPLoader","DBFLoader","parseShapefileInBatches","asyncIterator","options","context","reproject","_targetCrs","gis","parseInBatches","fetch","url","shx","cpg","prj","loadShapefileSidecarFiles","shapeIterator","propertyIterator","dbfResponse","replaceExtension","ok","dbf","encoding","shapeHeader","next","value","batchType","dbfHeader","iterator","item","geometries","properties","geojsonGeometries","parseGeometries","features","joinProperties","reprojectFeatures","header","data","parseShapefile","arrayBuffer","parse","geom","push","type","i","length","geometry","feature","sourceCrs","targetCrs","projection","from","to","coord","project","shxPromise","cpgPromise","prjPromise","Promise","all","shxResponse","cpgResponse","text","prjResponse","newExtension","baseName","basename","extension","extname","isUpperCase","toUpperCase","extIndex","lastIndexOf","substr"],"mappings":"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","sourcesContent":["import {Proj4Projection} from '@math.gl/proj4';\nimport {binaryToGeoJson, transformGeoJsonCoords} from '@loaders.gl/gis';\nimport {parseShx} from './parse-shx';\nimport {zipBatchIterators} from '../streaming/zip-batch-iterators';\nimport {SHPLoader} from '../../shp-loader';\nimport {DBFLoader} from '../../dbf-loader';\n\n// eslint-disable-next-line max-statements, complexity\nexport async function* parseShapefileInBatches(asyncIterator, options, context) {\n  const {reproject = false, _targetCrs = 'WGS84'} = (options && options.gis) || {};\n  const {parseInBatches, fetch, url} = context;\n  const {shx, cpg, prj} = await loadShapefileSidecarFiles(options, context);\n\n  // parse geometries\n  const shapeIterator = await parseInBatches(asyncIterator, SHPLoader, options);\n\n  // parse properties\n  let propertyIterator;\n  const dbfResponse = await fetch(replaceExtension(url, 'dbf'));\n  if (dbfResponse.ok) {\n    propertyIterator = await parseInBatches(dbfResponse, DBFLoader, {\n      ...options,\n      dbf: {encoding: cpg || 'latin1'}\n    });\n  }\n\n  // When `options.metadata` is `true`, there's an extra initial `metadata`\n  // object before the iterator starts. zipBatchIterators expects to receive\n  // batches of Array objects, and will fail with non-iterable batches, so it's\n  // important to skip over the first batch.\n  let shapeHeader = (await shapeIterator.next()).value;\n  if (shapeHeader && shapeHeader.batchType === 'metadata') {\n    shapeHeader = (await shapeIterator.next()).value;\n  }\n\n  let dbfHeader = {};\n  if (propertyIterator) {\n    dbfHeader = (await propertyIterator.next()).value;\n    if (dbfHeader && dbfHeader.batchType === 'metadata') {\n      dbfHeader = (await propertyIterator.next()).value;\n    }\n  }\n\n  let iterator;\n  if (propertyIterator) {\n    iterator = await zipBatchIterators(shapeIterator, propertyIterator);\n  } else {\n    iterator = shapeIterator;\n  }\n\n  for await (const item of iterator) {\n    let geometries;\n    let properties;\n    if (!propertyIterator) {\n      geometries = item;\n    } else {\n      [geometries, properties] = item;\n    }\n\n    const geojsonGeometries = parseGeometries(geometries);\n    let features = joinProperties(geojsonGeometries, properties);\n    if (reproject) {\n      features = reprojectFeatures(features, prj, _targetCrs);\n    }\n    yield {\n      encoding: cpg,\n      prj,\n      shx,\n      header: shapeHeader,\n      data: features\n    };\n  }\n}\n\nexport async function parseShapefile(arrayBuffer, options, context) {\n  const {reproject = false, _targetCrs = 'WGS84'} = (options && options.gis) || {};\n  const {parse} = context;\n  const {shx, cpg, prj} = await loadShapefileSidecarFiles(options, context);\n\n  // parse geometries\n  const {header, geometries} = await parse(arrayBuffer, SHPLoader, options); // {shp: shx}\n\n  const geojsonGeometries = parseGeometries(geometries);\n\n  // parse properties\n  let properties = [];\n  const {url, fetch} = context;\n  const dbfResponse = await fetch(replaceExtension(url, 'dbf'));\n  if (dbfResponse.ok) {\n    properties = await parse(dbfResponse, DBFLoader, {dbf: {encoding: cpg || 'latin1'}});\n  }\n\n  let features = joinProperties(geojsonGeometries, properties);\n  if (reproject) {\n    features = reprojectFeatures(features, prj, _targetCrs);\n  }\n\n  return {\n    encoding: cpg,\n    prj,\n    shx,\n    header,\n    data: features\n  };\n}\n\nfunction parseGeometries(geometries) {\n  const geojsonGeometries = [];\n  for (const geom of geometries) {\n    geojsonGeometries.push(binaryToGeoJson(geom, geom.type, 'geometry'));\n  }\n\n  return geojsonGeometries;\n}\n\n/**\n * Join properties and geometries into features\n *\n * @param  {object[]} geometries [description]\n * @param  {object[]?} properties [description]\n * @return {object[]}            [description]\n */\nfunction joinProperties(geometries, properties) {\n  const features = [];\n  for (let i = 0; i < geometries.length; i++) {\n    const geometry = geometries[i];\n    const feature = {\n      type: 'Feature',\n      geometry,\n      // properties can be undefined if dbfResponse above was empty\n      properties: (properties && properties[i]) || {}\n    };\n    features.push(feature);\n  }\n\n  return features;\n}\n\n/**\n * Reproject GeoJSON features to output CRS\n *\n * @param  {object[]} features parsed GeoJSON features\n * @param  {string} sourceCrs source coordinate reference system\n * @param  {string} targetCrs †arget coordinate reference system\n * @return {object[]} Reprojected Features\n */\nfunction reprojectFeatures(features, sourceCrs, targetCrs) {\n  const projection = new Proj4Projection({from: sourceCrs || 'WGS84', to: targetCrs || 'WGS84'});\n  return transformGeoJsonCoords(features, coord => projection.project(coord));\n}\n\n// eslint-disable-next-line max-statements\nexport async function loadShapefileSidecarFiles(options, context) {\n  // Attempt a parallel load of the small sidecar files\n  const {url, fetch} = context;\n  const shxPromise = fetch(replaceExtension(url, 'shx'));\n  const cpgPromise = fetch(replaceExtension(url, 'cpg'));\n  const prjPromise = fetch(replaceExtension(url, 'prj'));\n  await Promise.all([shxPromise, cpgPromise, prjPromise]);\n\n  let shx = null;\n  let cpg = null;\n  let prj = null;\n\n  const shxResponse = await shxPromise;\n  if (shxResponse.ok) {\n    const arrayBuffer = await shxResponse.arrayBuffer();\n    shx = parseShx(arrayBuffer);\n  }\n\n  const cpgResponse = await cpgPromise;\n  if (cpgResponse.ok) {\n    cpg = await cpgResponse.text();\n  }\n\n  const prjResponse = await prjPromise;\n  if (prjResponse.ok) {\n    prj = await prjResponse.text();\n  }\n\n  return {\n    shx,\n    cpg,\n    prj\n  };\n}\n\nexport function replaceExtension(url, newExtension) {\n  const baseName = basename(url);\n  const extension = extname(url);\n  const isUpperCase = extension === extension.toUpperCase();\n  if (isUpperCase) {\n    newExtension = newExtension.toUpperCase();\n  }\n  return `${baseName}.${newExtension}`;\n}\n\n// NOTE - this gives the entire path minus extension (i.e. NOT same as path.basename)\nfunction basename(url) {\n  const extIndex = url && url.lastIndexOf('.');\n  return extIndex >= 0 ? url.substr(0, extIndex) : '';\n}\n\nfunction extname(url) {\n  const extIndex = url && url.lastIndexOf('.');\n  return extIndex >= 0 ? url.substr(extIndex + 1) : '';\n}\n"],"file":"parse-shapefile.js"}