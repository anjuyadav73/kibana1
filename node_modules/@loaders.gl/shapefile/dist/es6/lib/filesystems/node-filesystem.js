import fs from 'fs';
import util from 'util';
export default class NodeFileSystem {
  constructor(options = {}) {
    this._fetch = options.fetch;
  }

  async readdir(path = '.', options) {
    const readdir = util.promisify(fs.readdir);
    return await readdir(path, options);
  }

  async stat(path, options) {
    const stat = util.promisify(fs.stat);
    const info = await stat(path, options);
    return {
      size: Number(info.size),
      isDirectory: () => false,
      info
    };
  }

  async fetch(path, options = {}) {
    const fallbackFetch = options.fetch || this._fetch;
    return fallbackFetch(path, options);
  }

  async open(path, flags, mode) {
    const open = util.promisify(fs.open);
    return await open(path, flags);
  }

  async close(fd) {
    const close = util.promisify(fs.close);
    return await close(fd);
  }

  async fstat(fd) {
    const fstat = util.promisify(fs.fstat);
    const info = await fstat(fd);
    return info;
  }

  async read(fd, {
    buffer = null,
    offset = 0,
    length = buffer.byteLength,
    position = null
  }) {
    const fsRead = util.promisify(fs.read);
    let totalBytesRead = 0;

    while (totalBytesRead < length) {
      const {
        bytesRead
      } = await fsRead(fd, buffer, offset + totalBytesRead, length - totalBytesRead, position + totalBytesRead);
      totalBytesRead += bytesRead;
    }

    return {
      bytesRead: totalBytesRead,
      buffer
    };
  }

}
//# sourceMappingURL=node-filesystem.js.map