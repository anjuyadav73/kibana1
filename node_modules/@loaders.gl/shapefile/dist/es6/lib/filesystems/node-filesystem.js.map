{"version":3,"sources":["../../../../src/lib/filesystems/node-filesystem.js"],"names":["fs","util","NodeFileSystem","constructor","options","_fetch","fetch","readdir","path","promisify","stat","info","size","Number","isDirectory","fallbackFetch","open","flags","mode","close","fd","fstat","read","buffer","offset","length","byteLength","position","fsRead","totalBytesRead","bytesRead"],"mappings":"AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAOA,eAAe,MAAMC,cAAN,CAAqB;AAClCC,EAAAA,WAAW,CAACC,OAAO,GAAG,EAAX,EAAe;AACxB,SAAKC,MAAL,GAAcD,OAAO,CAACE,KAAtB;AACD;;AAED,QAAMC,OAAN,CAAcC,IAAI,GAAG,GAArB,EAA0BJ,OAA1B,EAAmC;AACjC,UAAMG,OAAO,GAAGN,IAAI,CAACQ,SAAL,CAAeT,EAAE,CAACO,OAAlB,CAAhB;AACA,WAAO,MAAMA,OAAO,CAACC,IAAD,EAAOJ,OAAP,CAApB;AACD;;AAED,QAAMM,IAAN,CAAWF,IAAX,EAAiBJ,OAAjB,EAA0B;AACxB,UAAMM,IAAI,GAAGT,IAAI,CAACQ,SAAL,CAAeT,EAAE,CAACU,IAAlB,CAAb;AACA,UAAMC,IAAI,GAAG,MAAMD,IAAI,CAACF,IAAD,EAAOJ,OAAP,CAAvB;AACA,WAAO;AAACQ,MAAAA,IAAI,EAAEC,MAAM,CAACF,IAAI,CAACC,IAAN,CAAb;AAA0BE,MAAAA,WAAW,EAAE,MAAM,KAA7C;AAAoDH,MAAAA;AAApD,KAAP;AACD;;AAED,QAAML,KAAN,CAAYE,IAAZ,EAAkBJ,OAAO,GAAG,EAA5B,EAAgC;AAE9B,UAAMW,aAAa,GAAGX,OAAO,CAACE,KAAR,IAAiB,KAAKD,MAA5C;AACA,WAAOU,aAAa,CAACP,IAAD,EAAOJ,OAAP,CAApB;AACD;;AAED,QAAMY,IAAN,CAAWR,IAAX,EAAiBS,KAAjB,EAAwBC,IAAxB,EAA8B;AAC5B,UAAMF,IAAI,GAAGf,IAAI,CAACQ,SAAL,CAAeT,EAAE,CAACgB,IAAlB,CAAb;AACA,WAAO,MAAMA,IAAI,CAACR,IAAD,EAAOS,KAAP,CAAjB;AACD;;AAED,QAAME,KAAN,CAAYC,EAAZ,EAAgB;AACd,UAAMD,KAAK,GAAGlB,IAAI,CAACQ,SAAL,CAAeT,EAAE,CAACmB,KAAlB,CAAd;AACA,WAAO,MAAMA,KAAK,CAACC,EAAD,CAAlB;AACD;;AAED,QAAMC,KAAN,CAAYD,EAAZ,EAAgB;AACd,UAAMC,KAAK,GAAGpB,IAAI,CAACQ,SAAL,CAAeT,EAAE,CAACqB,KAAlB,CAAd;AACA,UAAMV,IAAI,GAAG,MAAMU,KAAK,CAACD,EAAD,CAAxB;AACA,WAAOT,IAAP;AACD;;AAED,QAAMW,IAAN,CAAWF,EAAX,EAAe;AAACG,IAAAA,MAAM,GAAG,IAAV;AAAgBC,IAAAA,MAAM,GAAG,CAAzB;AAA4BC,IAAAA,MAAM,GAAGF,MAAM,CAACG,UAA5C;AAAwDC,IAAAA,QAAQ,GAAG;AAAnE,GAAf,EAAyF;AACvF,UAAMC,MAAM,GAAG3B,IAAI,CAACQ,SAAL,CAAeT,EAAE,CAACsB,IAAlB,CAAf;AACA,QAAIO,cAAc,GAAG,CAArB;;AAEA,WAAOA,cAAc,GAAGJ,MAAxB,EAAgC;AAC9B,YAAM;AAACK,QAAAA;AAAD,UAAc,MAAMF,MAAM,CAC9BR,EAD8B,EAE9BG,MAF8B,EAG9BC,MAAM,GAAGK,cAHqB,EAI9BJ,MAAM,GAAGI,cAJqB,EAK9BF,QAAQ,GAAGE,cALmB,CAAhC;AAOAA,MAAAA,cAAc,IAAIC,SAAlB;AACD;;AACD,WAAO;AAACA,MAAAA,SAAS,EAAED,cAAZ;AAA4BN,MAAAA;AAA5B,KAAP;AACD;;AArDiC","sourcesContent":["import fs from 'fs';\nimport util from 'util';\n\n// import {fetchFile} from \"../fetch/fetch-file\"\n// import {selectLoader} from \"../api/select-loader\";\n/** @typedef {import('@loaders.gl/loader-utils').IFileSystem} IFileSystem */\n\n/** @implements {IFileSystem} */\nexport default class NodeFileSystem {\n  constructor(options = {}) {\n    this._fetch = options.fetch;\n  }\n\n  async readdir(path = '.', options) {\n    const readdir = util.promisify(fs.readdir);\n    return await readdir(path, options);\n  }\n\n  async stat(path, options) {\n    const stat = util.promisify(fs.stat);\n    const info = await stat(path, options);\n    return {size: Number(info.size), isDirectory: () => false, info};\n  }\n\n  async fetch(path, options = {}) {\n    // Falls back to handle https:/http:/data: etc fetches\n    const fallbackFetch = options.fetch || this._fetch;\n    return fallbackFetch(path, options);\n  }\n\n  async open(path, flags, mode) {\n    const open = util.promisify(fs.open);\n    return await open(path, flags);\n  }\n\n  async close(fd) {\n    const close = util.promisify(fs.close);\n    return await close(fd);\n  }\n\n  async fstat(fd) {\n    const fstat = util.promisify(fs.fstat);\n    const info = await fstat(fd);\n    return info;\n  }\n\n  async read(fd, {buffer = null, offset = 0, length = buffer.byteLength, position = null}) {\n    const fsRead = util.promisify(fs.read);\n    let totalBytesRead = 0;\n    // Read in loop until we get required number of bytes\n    while (totalBytesRead < length) {\n      const {bytesRead} = await fsRead(\n        fd,\n        buffer,\n        offset + totalBytesRead,\n        length - totalBytesRead,\n        position + totalBytesRead\n      );\n      totalBytesRead += bytesRead;\n    }\n    return {bytesRead: totalBytesRead, buffer};\n  }\n}\n"],"file":"node-filesystem.js"}