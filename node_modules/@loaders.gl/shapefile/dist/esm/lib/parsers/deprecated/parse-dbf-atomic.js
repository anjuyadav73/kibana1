function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import BinaryReader from '../../streaming/binary-reader';
var LITTLE_ENDIAN = true;
var DBF_HEADER_SIZE = 32;
export default function parseDbf(arrayBuffer, options) {
  var binaryReader = new BinaryReader(arrayBuffer);
  var loaderOptions = options.dbf || {};
  var encoding = loaderOptions.encoding;
  var fileHeaderView = binaryReader.getDataView(DBF_HEADER_SIZE);
  var header = parseDBFHeader(fileHeaderView);
  var headerLength = header.headerLength,
      recordLength = header.recordLength,
      nRecords = header.nRecords;
  var textDecoder = new TextDecoder(encoding);
  var colHeaderView = binaryReader.getDataView(headerLength - DBF_HEADER_SIZE);
  var fields = parseColumnHeaders(colHeaderView, textDecoder);
  binaryReader.skip(1);
  return parseRows(binaryReader, fields, nRecords, recordLength, textDecoder);
}

function parseDBFHeader(headerView) {
  return {
    year: headerView.getUint8(1) + 1900,
    month: headerView.getUint8(2),
    day: headerView.getUint8(3),
    nRecords: headerView.getUint32(4, LITTLE_ENDIAN),
    headerLength: headerView.getUint16(8, LITTLE_ENDIAN),
    recordLength: headerView.getUint16(10, LITTLE_ENDIAN),
    languageDriver: headerView.getUint8(29)
  };
}

function parseColumnHeaders(view, textDecoder) {
  var nFields = (view.byteLength - 1) / 32;
  var fields = [];
  var offset = 0;

  for (var i = 0; i < nFields; i++) {
    var name = textDecoder.decode(new Uint8Array(view.buffer, view.byteOffset + offset, 11)).replace(/\u0000/g, '');
    fields.push({
      name: name,
      dataType: String.fromCharCode(view.getUint8(offset + 11)),
      fieldLength: view.getUint8(offset + 16),
      decimal: view.getUint8(offset + 17)
    });
    offset += 32;
  }

  return fields;
}

function parseRows(binaryReader, fields, nRecords, recordLength, textDecoder) {
  var rows = [];

  for (var i = 0; i < nRecords; i++) {
    var recordView = binaryReader.getDataView(recordLength - 1);
    binaryReader.skip(1);
    rows.push(parseRow(recordView, fields, textDecoder));
  }

  return rows;
}

function parseRow(view, fields, textDecoder) {
  var out = {};
  var offset = 0;

  var _iterator = _createForOfIteratorHelper(fields),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var field = _step.value;
      var text = textDecoder.decode(new Uint8Array(view.buffer, view.byteOffset + offset, field.fieldLength));
      out[field.name] = parseField(text, field.dataType);
      offset += field.fieldLength;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return out;
}

function parseField(text, dataType) {
  switch (dataType) {
    case 'B':
      return parseNumber(text);

    case 'C':
      return parseCharacter(text);

    case 'F':
      return parseNumber(text);

    case 'N':
      return parseNumber(text);

    case 'O':
      return parseNumber(text);

    case 'D':
      return parseDate(text);

    case 'L':
      return parseBoolean(text);

    default:
      throw new Error('Unsupported data type');
  }
}

function parseDate(str) {
  return Date.UTC(str.slice(0, 4), parseInt(str.slice(4, 6), 10) - 1, str.slice(6, 8));
}

function parseBoolean(value) {
  return /^[nf]$/i.test(value) ? false : /^[yt]$/i.test(value) ? true : null;
}

function parseNumber(text) {
  var number = parseFloat(text);
  return isNaN(number) ? null : number;
}

function parseCharacter(text) {
  return text.trim() || null;
}
//# sourceMappingURL=parse-dbf-atomic.js.map