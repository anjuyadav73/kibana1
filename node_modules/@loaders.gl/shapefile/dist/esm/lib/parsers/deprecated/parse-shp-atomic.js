import BinaryReader from '../../streaming/binary-reader';
import { parseRecord } from '../parse-shp-geometry';
var LITTLE_ENDIAN = true;
var BIG_ENDIAN = false;
var SHP_MAGIC_NUMBER = 0x0000270a;
var SHP_HEADER_SIZE = 100;
var SHP_RECORD_HEADER_SIZE = 8;
export default function parseSHP(arrayBuffer, options) {
  var binaryReader = new BinaryReader(arrayBuffer);
  var headerView = binaryReader.getDataView(SHP_HEADER_SIZE);
  var header = parseSHPHeader(headerView);
  var currentIndex = 1;
  var geometries = [];

  while (binaryReader.hasAvailableBytes(SHP_RECORD_HEADER_SIZE + 4)) {
    var recordHeaderView = binaryReader.getDataView(SHP_RECORD_HEADER_SIZE + 4);
    var recordHeader = {
      recordNumber: recordHeaderView.getInt32(0, BIG_ENDIAN),
      byteLength: recordHeaderView.getInt32(4, BIG_ENDIAN) * 2,
      type: recordHeaderView.getInt32(8, LITTLE_ENDIAN)
    };
    var invalidRecord = recordHeader.byteLength < 4 || recordHeader.type !== header.type || recordHeader.recordNumber !== currentIndex;

    if (invalidRecord) {
      binaryReader.rewind(SHP_RECORD_HEADER_SIZE);
    } else {
      binaryReader.rewind(4);
      var recordView = binaryReader.getDataView(recordHeader.byteLength);
      geometries.push(parseRecord(recordView, options));
      currentIndex++;
    }
  }

  return {
    header: header,
    geometries: geometries
  };
}
export function parseSHPHeader(headerView) {
  var header = {
    magic: headerView.getInt32(0, BIG_ENDIAN),
    length: headerView.getInt32(24, BIG_ENDIAN) * 2,
    version: headerView.getInt32(28, LITTLE_ENDIAN),
    type: headerView.getInt32(32, LITTLE_ENDIAN),
    bbox: {
      minX: headerView.getFloat64(36, LITTLE_ENDIAN),
      minY: headerView.getFloat64(44, LITTLE_ENDIAN),
      minZ: headerView.getFloat64(68, LITTLE_ENDIAN),
      minM: headerView.getFloat64(84, LITTLE_ENDIAN),
      maxX: headerView.getFloat64(52, LITTLE_ENDIAN),
      maxY: headerView.getFloat64(60, LITTLE_ENDIAN),
      maxZ: headerView.getFloat64(76, LITTLE_ENDIAN),
      maxM: headerView.getFloat64(92, LITTLE_ENDIAN)
    }
  };

  if (header.magic !== SHP_MAGIC_NUMBER) {
    console.error("SHP file: bad magic number ".concat(header.magic));
  }

  if (header.version !== 1000) {
    console.error("SHP file: bad version ".concat(header.version));
  }

  return header;
}
//# sourceMappingURL=parse-shp-atomic.js.map