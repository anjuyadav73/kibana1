{"version":3,"sources":["../../../../src/lib/streaming/zip-batch-iterators.js"],"names":["zipBatchIterators","iterator1","iterator2","batch1","batch2","iterator1Done","iterator2Done","length","next","value","done","batch","extractBatch","batchLength","Math","min","slice","splice"],"mappings":";;;AAGA,gBAAuBA,iBAAvB;AAAA;AAAA;;;oEAAO,iBAAkCC,SAAlC,EAA6CC,SAA7C;AAAA;;AAAA;AAAA;AAAA;AAAA;AACDC,YAAAA,MADC,GACQ,EADR;AAEDC,YAAAA,MAFC,GAEQ,EAFR;AAGDC,YAAAA,aAHC,GAGe,KAHf;AAIDC,YAAAA,aAJC,GAIe,KAJf;;AAAA;AAAA,kBAQE,CAACD,aAAD,IAAkB,CAACC,aARrB;AAAA;AAAA;AAAA;;AAAA,kBASCH,MAAM,CAACI,MAAP,KAAkB,CAAlB,IAAuB,CAACF,aATzB;AAAA;AAAA;AAAA;;AAAA;AAAA,wCAU2BJ,SAAS,CAACO,IAAV,EAV3B;;AAAA;AAAA;AAUMC,YAAAA,KAVN,yBAUMA,KAVN;AAUaC,YAAAA,IAVb,yBAUaA,IAVb;;AAWD,gBAAIA,IAAJ,EAAU;AACRL,cAAAA,aAAa,GAAG,IAAhB;AACD,aAFD,MAEO;AACLF,cAAAA,MAAM,GAAGM,KAAT;AACD;;AAfA;AAAA;;AAAA;AAAA,kBAgBQL,MAAM,CAACG,MAAP,KAAkB,CAAlB,IAAuB,CAACD,aAhBhC;AAAA;AAAA;AAAA;;AAAA;AAAA,wCAiB2BJ,SAAS,CAACM,IAAV,EAjB3B;;AAAA;AAAA;AAiBMC,YAAAA,MAjBN,0BAiBMA,KAjBN;AAiBaC,YAAAA,KAjBb,0BAiBaA,IAjBb;;AAkBD,gBAAIA,KAAJ,EAAU;AACRJ,cAAAA,aAAa,GAAG,IAAhB;AACD,aAFD,MAEO;AACLF,cAAAA,MAAM,GAAGK,MAAT;AACD;;AAtBA;AAyBGE,YAAAA,KAzBH,GAyBWC,YAAY,CAACT,MAAD,EAASC,MAAT,CAzBvB;;AAAA,iBA0BCO,KA1BD;AAAA;AAAA;AAAA;;AAAA;AA2BD,mBAAMA,KAAN;;AA3BC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAuCP,SAASC,YAAT,CAAsBT,MAAtB,EAA8BC,MAA9B,EAAsC;AACpC,MAAMS,WAAW,GAAGC,IAAI,CAACC,GAAL,CAASZ,MAAM,CAACI,MAAhB,EAAwBH,MAAM,CAACG,MAA/B,CAApB;;AACA,MAAIM,WAAW,KAAK,CAApB,EAAuB;AACrB,WAAO,IAAP;AACD;;AAGD,MAAMF,KAAK,GAAG,CAACR,MAAM,CAACa,KAAP,CAAa,CAAb,EAAgBH,WAAhB,CAAD,EAA+BT,MAAM,CAACY,KAAP,CAAa,CAAb,EAAgBH,WAAhB,CAA/B,CAAd;AAGAV,EAAAA,MAAM,CAACc,MAAP,CAAc,CAAd,EAAiBJ,WAAjB;AACAT,EAAAA,MAAM,CAACa,MAAP,CAAc,CAAd,EAAiBJ,WAAjB;AACA,SAAOF,KAAP;AACD","sourcesContent":["/**\n * Zip two iterators together\n */\nexport async function* zipBatchIterators(iterator1, iterator2) {\n  let batch1 = [];\n  let batch2 = [];\n  let iterator1Done = false;\n  let iterator2Done = false;\n\n  // TODO - one could let all iterators flow at full speed using `Promise.race`\n  // however we might end up with a big temporary buffer\n  while (!iterator1Done && !iterator2Done) {\n    if (batch1.length === 0 && !iterator1Done) {\n      const {value, done} = await iterator1.next();\n      if (done) {\n        iterator1Done = true;\n      } else {\n        batch1 = value;\n      }\n    } else if (batch2.length === 0 && !iterator2Done) {\n      const {value, done} = await iterator2.next();\n      if (done) {\n        iterator2Done = true;\n      } else {\n        batch2 = value;\n      }\n    }\n\n    const batch = extractBatch(batch1, batch2);\n    if (batch) {\n      yield batch;\n    }\n  }\n}\n\n/**\n * Extract batch of same length from two batches\n *\n * @param  {Array} batch1\n * @param  {Array} batch2\n * @return {Array?}\n */\nfunction extractBatch(batch1, batch2) {\n  const batchLength = Math.min(batch1.length, batch2.length);\n  if (batchLength === 0) {\n    return null;\n  }\n\n  // Non interleaved arrays\n  const batch = [batch1.slice(0, batchLength), batch2.slice(0, batchLength)];\n\n  // Modify the 2 batches\n  batch1.splice(0, batchLength);\n  batch2.splice(0, batchLength);\n  return batch;\n}\n"],"file":"zip-batch-iterators.js"}