{"version":3,"sources":["../../../../src/lib/filesystems/node-filesystem.js"],"names":["fs","util","NodeFileSystem","options","_fetch","fetch","path","readdir","promisify","stat","info","size","Number","isDirectory","fallbackFetch","flags","mode","open","fd","close","fstat","buffer","offset","length","byteLength","position","fsRead","read","totalBytesRead","bytesRead"],"mappings":";;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;;IAOqBC,c;AACnB,4BAA0B;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AACxB,SAAKC,MAAL,GAAcD,OAAO,CAACE,KAAtB;AACD;;;;;;;;;;;;;;AAEaC,gBAAAA,I,2DAAO,G;AAAKH,gBAAAA,O;AAClBI,gBAAAA,O,GAAUN,IAAI,CAACO,SAAL,CAAeR,EAAE,CAACO,OAAlB,C;;uBACHA,OAAO,CAACD,IAAD,EAAOH,OAAP,C;;;;;;;;;;;;;;;;;;;;;;+EAGXG,I,EAAMH,O;;;;;;AACTM,gBAAAA,I,GAAOR,IAAI,CAACO,SAAL,CAAeR,EAAE,CAACS,IAAlB,C;;uBACMA,IAAI,CAACH,IAAD,EAAOH,OAAP,C;;;AAAjBO,gBAAAA,I;kDACC;AAACC,kBAAAA,IAAI,EAAEC,MAAM,CAACF,IAAI,CAACC,IAAN,CAAb;AAA0BE,kBAAAA,WAAW,EAAE;AAAA,2BAAM,KAAN;AAAA,mBAAvC;AAAoDH,kBAAAA,IAAI,EAAJA;AAApD,iB;;;;;;;;;;;;;;;;;;;gFAGGJ,I;;;;;;;;AAAMH,gBAAAA,O,8DAAU,E;AAEpBW,gBAAAA,a,GAAgBX,OAAO,CAACE,KAAR,IAAiB,KAAKD,M;kDACrCU,aAAa,CAACR,IAAD,EAAOH,OAAP,C;;;;;;;;;;;;;;;;;;;+EAGXG,I,EAAMS,K,EAAOC,I;;;;;;AAChBC,gBAAAA,I,GAAOhB,IAAI,CAACO,SAAL,CAAeR,EAAE,CAACiB,IAAlB,C;;uBACAA,IAAI,CAACX,IAAD,EAAOS,KAAP,C;;;;;;;;;;;;;;;;;;;;;;gFAGPG,E;;;;;;AACJC,gBAAAA,K,GAAQlB,IAAI,CAACO,SAAL,CAAeR,EAAE,CAACmB,KAAlB,C;;uBACDA,KAAK,CAACD,EAAD,C;;;;;;;;;;;;;;;;;;;;;;gFAGRA,E;;;;;;AACJE,gBAAAA,K,GAAQnB,IAAI,CAACO,SAAL,CAAeR,EAAE,CAACoB,KAAlB,C;;uBACKA,KAAK,CAACF,EAAD,C;;;AAAlBR,gBAAAA,I;kDACCA,I;;;;;;;;;;;;;;;;;;;+EAGEQ,E;;;;;;;mCAAKG,M,EAAAA,M,4BAAS,I,mCAAMC,M,EAAAA,M,4BAAS,C,mCAAGC,M,EAAAA,M,4BAASF,MAAM,CAACG,U,qCAAYC,Q,EAAAA,Q,8BAAW,I;AAC1EC,gBAAAA,M,GAASzB,IAAI,CAACO,SAAL,CAAeR,EAAE,CAAC2B,IAAlB,C;AACXC,gBAAAA,c,GAAiB,C;;;sBAEdA,cAAc,GAAGL,M;;;;;;uBACIG,MAAM,CAC9BR,EAD8B,EAE9BG,MAF8B,EAG9BC,MAAM,GAAGM,cAHqB,EAI9BL,MAAM,GAAGK,cAJqB,EAK9BH,QAAQ,GAAGG,cALmB,C;;;;AAAzBC,gBAAAA,S,iBAAAA,S;AAOPD,gBAAAA,cAAc,IAAIC,SAAlB;;;;;kDAEK;AAACA,kBAAAA,SAAS,EAAED,cAAZ;AAA4BP,kBAAAA,MAAM,EAANA;AAA5B,iB;;;;;;;;;;;;;;;;;;;;;SApDUnB,c","sourcesContent":["import fs from 'fs';\nimport util from 'util';\n\n// import {fetchFile} from \"../fetch/fetch-file\"\n// import {selectLoader} from \"../api/select-loader\";\n/** @typedef {import('@loaders.gl/loader-utils').IFileSystem} IFileSystem */\n\n/** @implements {IFileSystem} */\nexport default class NodeFileSystem {\n  constructor(options = {}) {\n    this._fetch = options.fetch;\n  }\n\n  async readdir(path = '.', options) {\n    const readdir = util.promisify(fs.readdir);\n    return await readdir(path, options);\n  }\n\n  async stat(path, options) {\n    const stat = util.promisify(fs.stat);\n    const info = await stat(path, options);\n    return {size: Number(info.size), isDirectory: () => false, info};\n  }\n\n  async fetch(path, options = {}) {\n    // Falls back to handle https:/http:/data: etc fetches\n    const fallbackFetch = options.fetch || this._fetch;\n    return fallbackFetch(path, options);\n  }\n\n  async open(path, flags, mode) {\n    const open = util.promisify(fs.open);\n    return await open(path, flags);\n  }\n\n  async close(fd) {\n    const close = util.promisify(fs.close);\n    return await close(fd);\n  }\n\n  async fstat(fd) {\n    const fstat = util.promisify(fs.fstat);\n    const info = await fstat(fd);\n    return info;\n  }\n\n  async read(fd, {buffer = null, offset = 0, length = buffer.byteLength, position = null}) {\n    const fsRead = util.promisify(fs.read);\n    let totalBytesRead = 0;\n    // Read in loop until we get required number of bytes\n    while (totalBytesRead < length) {\n      const {bytesRead} = await fsRead(\n        fd,\n        buffer,\n        offset + totalBytesRead,\n        length - totalBytesRead,\n        position + totalBytesRead\n      );\n      totalBytesRead += bytesRead;\n    }\n    return {bytesRead: totalBytesRead, buffer};\n  }\n}\n"],"file":"node-filesystem.js"}