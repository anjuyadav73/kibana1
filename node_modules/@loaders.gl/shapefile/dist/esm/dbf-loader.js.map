{"version":3,"sources":["../../src/dbf-loader.js"],"names":["parseDBF","parseDBFInBatches","VERSION","DBFWorkerLoader","id","name","category","version","extensions","mimeTypes","options","dbf","encoding","workerUrl","DBFLoader","parse","arrayBuffer","parseSync","parseInBatches"],"mappings":";;;;;;;;AAEA,SAAQA,QAAR,EAAkBC,iBAAlB,QAA0C,yBAA1C;AAIA,IAAMC,OAAO,GAAG,oBAAuB,WAAvB,cAAmD,QAAnE;AAGA,OAAO,IAAMC,eAAe,GAAG;AAC7BC,EAAAA,EAAE,EAAE,KADyB;AAE7BC,EAAAA,IAAI,EAAE,KAFuB;AAG7BC,EAAAA,QAAQ,EAAE,OAHmB;AAI7BC,EAAAA,OAAO,EAAEL,OAJoB;AAK7BM,EAAAA,UAAU,EAAE,CAAC,KAAD,CALiB;AAM7BC,EAAAA,SAAS,EAAE,CAAC,mBAAD,CANkB;AAO7BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,GAAG,EAAE;AACHC,MAAAA,QAAQ,EAAE,QADP;AAEHC,MAAAA,SAAS,oDAA6CX,OAA7C;AAFN;AADE;AAPoB,CAAxB;AAgBP,OAAO,IAAMY,SAAS,mCACjBX,eADiB;AAEpBY,EAAAA,KAAK;AAAA,4DAAE,iBAAOC,WAAP,EAAoBN,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA,+CAAgCV,QAAQ,CAACgB,WAAD,EAAcN,OAAd,CAAxC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KAFe;AAGpBO,EAAAA,SAAS,EAAEjB,QAHS;AAIpBkB,EAAAA,cAAc,EAAEjB;AAJI,EAAf","sourcesContent":["/** @typedef {import('@loaders.gl/loader-utils').LoaderObject} LoaderObject */\n/** @typedef {import('@loaders.gl/loader-utils').WorkerLoaderObject} WorkerLoaderObject */\nimport {parseDBF, parseDBFInBatches} from './lib/parsers/parse-dbf';\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\n/** @type {WorkerLoaderObject} */\nexport const DBFWorkerLoader = {\n  id: 'dbf',\n  name: 'DBF',\n  category: 'table',\n  version: VERSION,\n  extensions: ['dbf'],\n  mimeTypes: ['application/x-dbf'],\n  options: {\n    dbf: {\n      encoding: 'latin1',\n      workerUrl: `https://unpkg.com/@loaders.gl/shapefile@${VERSION}/dist/dbf-loader.worker.js`\n    }\n  }\n};\n\n/** @type {LoaderObject} */\nexport const DBFLoader = {\n  ...DBFWorkerLoader,\n  parse: async (arrayBuffer, options) => parseDBF(arrayBuffer, options),\n  parseSync: parseDBF,\n  parseInBatches: parseDBFInBatches\n};\n"],"file":"dbf-loader.js"}